{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///(webpack)/buildin/global.js","webpack:///./kuromoji/dict/TokenInfoDictionary.js","webpack:///./kuromoji/util/ByteBuffer.js","webpack:///./kuromoji/index.js","webpack:///./kuromoji/viterbi/ViterbiNode.js","webpack:///./kuromoji/util/SurrogateAwareString.js","webpack:///./node_modules/process/browser.js","webpack:///./kuromoji/dict/DynamicDictionaries.js","webpack:///./node_modules/doublearray/doublearray.js","webpack:///./kuromoji/dict/ConnectionCosts.js","webpack:///./kuromoji/dict/UnknownDictionary.js","webpack:///./kuromoji/dict/CharacterDefinition.js","webpack:///./kuromoji/dict/InvokeDefinitionMap.js","webpack:///./kuromoji/dict/CharacterClass.js","webpack:///./node_modules/kuroshiro-analyzer-kuromoji/src/index.js","webpack:///(webpack)/buildin/harmony-module.js","webpack:///./kuromoji/TokenizerBuilder.js","webpack:///./kuromoji/Tokenizer.js","webpack:///./kuromoji/viterbi/ViterbiBuilder.js","webpack:///./kuromoji/viterbi/ViterbiLattice.js","webpack:///./kuromoji/viterbi/ViterbiSearcher.js","webpack:///./kuromoji/util/IpadicFormatter.js","webpack:///./kuromoji/loader/BrowserDictionaryLoader.js","webpack:///./node_modules/zlibjs/bin/gunzip.min.js","webpack:///./kuromoji/loader/DictionaryLoader.js","webpack:///./node_modules/async/dist/async.js","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///(webpack)/buildin/module.js","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./kuromoji/dict/builder/DictionaryBuilder.js","webpack:///./kuromoji/dict/builder/ConnectionCostsBuilder.js","webpack:///./kuromoji/dict/builder/CharacterDefinitionBuilder.js","webpack:///./node_modules/kuroshiro/src/util.js","webpack:///./node_modules/kuroshiro/src/core.js","webpack:///./node_modules/kuroshiro/src/index.js","webpack:///./background.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","g","this","Function","e","window","ByteBuffer","TokenInfoDictionary","dictionary","target_map","pos_buffer","buildDictionary","entries","dictionary_entries","length","entry","surface_form","left_id","right_id","word_cost","feature","slice","join","isFinite","console","log","put","shrink","token_info_id","position","pos_id","putShort","putInt","putString","addMapping","source","target","mapping","push","targetMapToBuffer","buffer","map_keys_size","keys","values","map_values_size","parseInt","loadDictionary","array_buffer","loadPosVector","loadTargetMap","readInt","getFeatures","token_info_id_str","isNaN","getInt","getString","arg","initial_size","Uint8Array","size","reallocate","new_array","set","subarray","b","index","num","lower","upper","getShort","b0","b1","b2","b3","pos","str","bytes","j","unicode_code","utf16_code","charCodeAt","stringToUtf8Bytes","ch","buf","code","String","fromCharCode","utf8BytesToString","TokenizerBuilder","DictionaryBuilder","kuromoji","builder","option","dictionaryBuilder","node_name","node_cost","start_pos","type","cost","prev","shortest_cost","Number","MAX_VALUE","SurrogateAwareString","index_mapping","charAt","isSurrogatePair","surrogate_aware_index","surrogate_aware_start_index","surrogate_aware_end_index","NaN","toString","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","args","Array","arguments","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","doublearray","ConnectionCosts","UnknownDictionary","DynamicDictionaries","trie","token_info_dictionary","connection_costs","unknown_dictionary","build","k","v","loadTrie","base_buffer","check_buffer","load","loadTokenInfoDictionaries","token_info_buffer","target_map_buffer","loadConnectionCosts","cc_buffer","loadUnknownDictionaries","unk_buffer","unk_pos_buffer","unk_map_buffer","cat_map_buffer","compat_cat_map_buffer","invoke_def_buffer","newBC","initBase","_base","start","end","check","last_used_id","initCheck","_check","realloc","min_size","new_size","base_new_array","newArrayBuffer","base","signed","check_new_array","first_unused_node","ROOT_ID","getBaseBuffer","getCheckBuffer","loadBaseBuffer","loadCheckBuffer","Math","max","getBase","getCheck","setBase","base_value","setCheck","check_value","setFirstUnusedNode","getFirstUnusedNode","last_index","calc","unused_count","all","unused","efficiency","dump","dump_base","dump_check","DoubleArrayBuilder","bc","DoubleArray","append","record","sorted","buff_keys","map","sort","k1","k2","min_length","min","_build","parent_index","children_info","getChildrenInfo","findAllocatableBase","setBC","child_code","child_start","child_len","child_index","current_char","Int32Array","next_pos","next_char","parent_id","child_id","prev_unused_id","next_unused_id","curr","empty_area_found","candidate_id","isUnusedNode","contain","parent","child","traverse","lookup","commonPrefixSearch","result","grand_child","arrayCopy","Int8Array","Int16Array","RangeError","Uint16Array","Uint32Array","src","src_offset","ArrayBuffer","dstU8","srcU8","forward_dimension","backward_dimension","forward_id","backward_id","connection_costs_buffer","CharacterDefinition","character_definition","characterDefinition","lookupCompatibleCategory","InvokeDefinitionMap","CharacterClass","character_category_map","compatible_category_map","invoke_definition_map","char_def","parseCharCategory","class_id","parsed_category_def","category","invoke","grouping","max_length","parseCategoryMapping","parsed_category_mapping","default_category","compatible_category","default","compatible","parseRangeCategoryMapping","initCategoryMappings","category_mapping","code_point","bitset","default_id","integer","classes","bit","character_class","getCharacterClass","lookup_table","invoke_def","character_category_definition","is_always_invoke","is_grouping","class_name","init","toBuffer","char_class","kuromoji__WEBPACK_IMPORTED_MODULE_0__","kuromoji__WEBPACK_IMPORTED_MODULE_0___default","isNode","__webpack_exports__","[object Object]","dictPath","_analyzer","_dictPath","replace","Promise","resolve","reject","self","a","dicPath","err","newAnalyzer","trim","tokenize","verbose","word_id","word_type","word_position","originalModule","webpackPolyfill","children","Tokenizer","DictionaryLoader","dic_path","callback","dic","ViterbiBuilder","ViterbiSearcher","IpadicFormatter","PUNCTUATION","viterbi_builder","viterbi_searcher","formatter","splitByPunctuation","input","sentences","tail","search","substring","text","tokens","sentence","tokenizeForSentence","lattice","getLattice","best_path","last_pos","token","features","features_line","node","split","formatEntry","formatUnknownEntry","ViterbiNode","ViterbiLattice","sentence_str","trie_id","vocabulary","token_info_ids","surrogate_aware_tail","head_char","head_char_class","next_char_class","unk_ids","unk_id","appendEos","nodes_end_at","eos_pos","prev_nodes","forward","backward","nodes","shortest_prev_node","edge_cost","prev_node","_cost","shortest_path","node_back","reverse","pos_detail_1","pos_detail_2","pos_detail_3","conjugated_type","conjugated_form","basic_form","reading","pronunciation","BrowserDictionaryLoader","loadArrayBuffer","url","xhr","XMLHttpRequest","open","responseType","onload","status","statusText","arraybuffer","response","onerror","send","aa","execScript","shift","y","x","DataView","A","B","f","C","D","E","G","q","h","POSITIVE_INFINITY","getName","getData","data","H","K","J","ca","L","M","w","bufferSize","bufferType","resize","N","P","da","ea","F","Z","Q","z","O","I","u","R","W","la","S","fa","ga","ha","T","ia","ja","ka","U","V","Y","ma","X","$","Date","async","urljoin","file","load_callback","parallel","filename","_callback","buffers","setImmediate","global","arrayLike","newLen","newArr","idx","fn","callArgs","initialParams","pop","isObject","hasSetImmediate","hasNextTick","fallback","wrap","defer","setImmediate$1","asyncify","func","then","invokeCallback","message","error","rethrow","supportsSymbol","isAsync","wrapAsync","asyncFn","applyEach$1","eachfn","fns","go","that","cb","freeGlobal","freeSelf","root","Symbol$1","objectProto","nativeObjectToString","symToStringTag$1","undefined","nativeObjectToString$1","nullTag","undefinedTag","symToStringTag","baseGetTag","isOwn","tag","unmasked","getRawTag","objectToString","asyncTag","funcTag","genTag","proxyTag","MAX_SAFE_INTEGER","isLength","isArrayLike","isFunction","breakLoop","callFn","iteratorSymbol","iterator","getIterator","coll","isObjectLike","argsTag","baseIsArguments","objectProto$3","hasOwnProperty$2","propertyIsEnumerable","isArguments","isArray","freeExports","nodeType","freeModule","Buffer","isBuffer","MAX_SAFE_INTEGER$1","reIsUint","isIndex","test","typedArrayTags","freeExports$1","freeModule$1","freeProcess","nodeUtil","types","require","nodeIsTypedArray","isTypedArray","hasOwnProperty$1","arrayLikeKeys","inherited","isArr","isArg","isBuff","isType","skipIndexes","iteratee","baseTimes","objectProto$5","nativeKeys","transform","overArg","hasOwnProperty$3","baseKeys","Ctor","constructor","createArrayIterator","obj","okeys","item","next","done","createES2015Iterator","onlyOnce","_eachOfLimit","limit","nextElem","running","looping","iterateeCallback","replenish","elem","eachOfLimit","doLimit","iterable","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","Infinity","eachOf","doParallel","_asyncMap","arr","results","counter","_iteratee","_","applyEach","doParallelLimit","mapLimit","mapSeries","applyEachSeries","arrayEach","fromRight","baseFor","keysFunc","props","baseForOwn","baseIsNaN","baseIndexOf","fromIndex","strictIndexOf","predicate","baseFindIndex","auto","tasks","concurrency","numTasks","runningTasks","hasError","readyTasks","readyToCheck","uncheckedDependencies","enqueueTask","task","taskCallback","safeResults","val","rkey","processQueue","taskFn","runTask","getDependents","taskName","dependencies","remainingDependencies","dependencyName","taskListeners","currentTask","dependent","checkForDeadlocks","arrayMap","symbolTag","INFINITY","symbolProto","symbolToString","baseToString","isSymbol","castSlice","baseSlice","reHasUnicode","RegExp","rsAstral","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsSeq","rsSymbol","reUnicode","stringToArray","string","hasUnicode","match","unicodeToArray","asciiToArray","reTrim","chars","guard","strSymbols","chrSymbols","charsStartIndex","charsEndIndex","FN_ARGS","FN_ARG_SPLIT","FN_ARG","STRIP_COMMENTS","autoInject","newTasks","params","fnIsAsync","hasNoDeps","newTask","taskCb","newArgs","DLL","head","setInitial","dll","worker","payload","_worker","numRunning","workersList","processingScheduled","_insert","insertAtFront","started","idle","drain","_tasks","unshift","_next","splice","unsaturated","isProcessing","saturated","empty","paused","kill","remove","testFn","pause","resume","cargo","removeLink","insertAfter","newNode","insertBefore","toArray","eachOfSeries","reduce","memo","seq","_functions","newargs","nextargs","compose","_concat","concatLimit","mapResults","concatSeries","constant","identity","_createTester","getResult","testResult","testPassed","_findGetResult","detect","detectLimit","detectSeries","consoleFunc","doDuring","_fn","_test","truth","doWhilst","doUntil","during","_withoutIndex","eachLimit","eachLimit$1","eachSeries","ensureAsync","sync","innerArgs","notId","every","everyLimit","everySeries","baseProperty","filterArray","truthValues","filterGeneric","_filter","filter","filterLimit","filterSeries","forever","errback","groupByLimit","groupBy","groupBySeries","mapValuesLimit","newObj","mapValues","mapValuesSeries","has","memoize","hasher","queues","memoized","unmemoized","_parallel","parallelLimit","parallelLimit$1","queue$1","items","priorityQueue","priority","nextNode","race","TypeError","reduceRight","reflect","reflectCallback","cbArg","reflectAll","reject$1","rejectLimit","rejectSeries","constant$1","retry","opts","DEFAULT_TIMES","DEFAULT_INTERVAL","options","times","intervalFunc","acc","interval","errorFilter","parseTimes","_task","attempt","retryAttempt","retryable","series","some","Boolean","someLimit","someSeries","sortBy","comparator","left","right","criteria","milliseconds","info","timer","timedOut","nativeCeil","ceil","nativeMax","timeLimit","count","step","baseRange","timesSeries","accumulator","tryEach","res","unmemoize","whilst","until","waterfall","taskIndex","nextTask","each","timesLimit","allLimit","allSeries","any","anyLimit","anySeries","find","findLimit","findSeries","forEach","forEachSeries","forEachLimit","forEachOf","forEachOfSeries","forEachOfLimit","inject","foldl","foldr","select","selectLimit","selectSeries","wrapSync","factory","scope","Timeout","id","clearFn","_id","_clearFn","setInterval","clearInterval","close","unref","ref","enroll","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","clearImmediate","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","getPrototypeOf","handle","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","event","port2","createElement","documentElement","script","onreadystatechange","removeChild","appendChild","random","indexOf","addEventListener","attachEvent","deprecate","paths","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","strArray","resultArray","first","component","parts","normalize","ConnectionCostsBuilder","CharacterDefinitionBuilder","tid_entries","unk_entries","cc_builder","cd_builder","addTokenInfoDictionary","line","new_entry","putCostMatrixLine","putLine","putCharDefLine","putUnkDefLine","dictionaries","buildTokenInfoDictionary","buildUnknownDictionary","buildDoubleArray","unk_dictionary","words","lines","connection_cost","dimensions","costs","CATEGORY_DEF_PATTERN","CATEGORY_MAPPING_PATTERN","RANGE_CATEGORY_MAPPING_PATTERN","exec","parsed_range_category_mapping","range_mapping","KATAKANA_HIRAGANA_SHIFT","HIRAGANA_KATAKANA_SHIFT","ROMANIZATION_SYSTEM","NIPPON","PASSPORT","HEPBURN","isHiragana","isKatakana","isKana","isKanji","isJapanese","hasHiragana","hasKatakana","hasKanji","hasJapanese","toRawHiragana","toRawKatakana","toRawRomaji","system","romajiSystem","nippon","１","２","３","４","５","６","７","８","９","０","！","“","”","＃","＄","％","＆","’","（","）","＝","～","｜","＠","‘","＋","＊","；","：","＜","＞","、","。","／","？","＿","・","「","」","｛","｝","￥","＾","あ","い","う","え","お","ア","イ","ウ","エ","オ","か","き","く","け","こ","カ","キ","ク","ケ","コ","さ","し","す","せ","そ","サ","シ","ス","セ","ソ","た","ち","つ","て","と","タ","チ","ツ","テ","ト","な","に","ぬ","ね","の","ナ","ニ","ヌ","ネ","ノ","は","ひ","ふ","へ","ほ","ハ","ヒ","フ","ヘ","ホ","ま","み","む","め","も","マ","ミ","ム","メ","モ","や","ゆ","よ","ヤ","ユ","ヨ","ら","り","る","れ","ろ","ラ","リ","ル","レ","ロ","わ","ゐ","ゑ","を","ワ","ヰ","ヱ","ヲ","が","ぎ","ぐ","げ","ご","ガ","ギ","グ","ゲ","ゴ","ざ","じ","ず","ぜ","ぞ","ザ","ジ","ズ","ゼ","ゾ","だ","ぢ","づ","で","ど","ダ","ヂ","ヅ","デ","ド","ば","び","ぶ","べ","ぼ","バ","ビ","ブ","ベ","ボ","ぱ","ぴ","ぷ","ぺ","ぽ","パ","ピ","プ","ペ","ポ","きゃ","きゅ","きょ","しゃ","しゅ","しょ","ちゃ","ちゅ","ちょ","にゃ","にゅ","にょ","ひゃ","ひゅ","ひょ","みゃ","みゅ","みょ","りゃ","りゅ","りょ","キャ","キュ","キョ","シャ","シュ","ショ","チャ","チュ","チョ","ニャ","ニュ","ニョ","ヒャ","ヒュ","ヒョ","ミャ","ミュ","ミョ","リャ","リュ","リョ","ぎゃ","ぎゅ","ぎょ","じゃ","じゅ","じょ","ぢゃ","ぢゅ","ぢょ","びゃ","びゅ","びょ","ぴゃ","ぴゅ","ぴょ","くゎ","ぐゎ","ギャ","ギュ","ギョ","ジャ","ジュ","ジョ","ヂャ","ヂュ","ヂョ","ビャ","ビュ","ビョ","ピャ","ピュ","ピョ","クヮ","グヮ","ぁ","ぃ","ぅ","ぇ","ぉ","ゃ","ゅ","ょ","ゎ","ァ","ィ","ゥ","ェ","ォ","ャ","ュ","ョ","ヮ","ヵ","ヶ","ん","ン","　","いぇ","きぇ","くぃ","くぇ","くぉ","ぐぃ","ぐぇ","ぐぉ","イェ","キェ","クィ","クェ","クォ","グィ","グェ","グォ","しぇ","じぇ","すぃ","ずぃ","ちぇ","つぁ","つぃ","つぇ","つぉ","にぇ","ひぇ","ふぁ","ふぃ","ふぇ","ふぉ","ふゅ","ふょ","シェ","ジェ","スィ","ズィ","チェ","ツァ","ツィ","ツェ","ツォ","ニェ","ヒェ","ファ","フィ","フェ","フォ","フュ","フョ","passport","ヴ","hepburn","うぃ","うぇ","うぉ","くぁ","ぐぁ","ウィ","ウェ","ウォ","ヴァ","ヴィ","ヴェ","ヴォ","ヴュ","ヴョ","クァ","グァ","てぃ","てゅ","でぃ","でゅ","とぅ","どぅ","ティ","テュ","ディ","デュ","トゥ","ドゥ","pnt","reg_hatu","indices","mStr","getStrType","hasKJ","hasHK","patchTokens","cr","core_Kuroshiro","analyzer","parse","to","delimiter_start","delimiter_end","rawTokens","romajiConv","preToken","hi","tmp","hpattern","hc","hmatches","pickKJ","hc1","notations","pattern","isLastTokenKanji","subs","matches","pickKanji","c1","c2","c3","n0","n1","n2","n3","n4","n5","Util","hasKana","kanaToHiragna","kanaToKatakana","kanaToRomaji","initListeners","waitInitMessageListener","contextMenus","i18n","getMessage","contexts","onClicked","tab","menuItemId","tabs","sendMessage","runtime","onMessage","kuroshiro","kuroshiro_analyzer_kuromoji_src","extension","getURL","convert","content","listener"],"mappings":"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IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,KACAC,IAAA,IAGAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IAEAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KAEAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KAEAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KAEAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KAGAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KAEAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KAEAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KAEAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KAEAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KAGAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KAEAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KAEAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KAEAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KAEAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KAGAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MAGAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KA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","file":"background.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 34);\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar ByteBuffer = require(\"../util/ByteBuffer\");\n\n/**\n * TokenInfoDictionary\n * @constructor\n */\nfunction TokenInfoDictionary() {\n    this.dictionary = new ByteBuffer(10 * 1024 * 1024);\n    this.target_map = {};  // trie_id (of surface form) -> token_info_id (of token)\n    this.pos_buffer = new ByteBuffer(10 * 1024 * 1024);\n}\n\n// left_id right_id word_cost ...\n// ^ this position is token_info_id\nTokenInfoDictionary.prototype.buildDictionary = function (entries) {\n    var dictionary_entries = {};  // using as hashmap, string -> string (word_id -> surface_form) to build dictionary\n\n    for (var i = 0; i < entries.length; i++) {\n        var entry = entries[i];\n\n        if (entry.length < 4) {\n            continue;\n        }\n\n        var surface_form = entry[0];\n        var left_id = entry[1];\n        var right_id = entry[2];\n        var word_cost = entry[3];\n        var feature = entry.slice(4).join(\",\");  // TODO Optimize\n\n        // Assertion\n        if (!isFinite(left_id) || !isFinite(right_id) || !isFinite(word_cost)) {\n            console.log(entry);\n        }\n\n        var token_info_id = this.put(left_id, right_id, word_cost, surface_form, feature);\n        dictionary_entries[token_info_id] = surface_form;\n    }\n\n    // Remove last unused area\n    this.dictionary.shrink();\n    this.pos_buffer.shrink();\n\n    return dictionary_entries;\n};\n\nTokenInfoDictionary.prototype.put = function (left_id, right_id, word_cost, surface_form, feature) {\n    var token_info_id = this.dictionary.position;\n    var pos_id = this.pos_buffer.position;\n\n    this.dictionary.putShort(left_id);\n    this.dictionary.putShort(right_id);\n    this.dictionary.putShort(word_cost);\n    this.dictionary.putInt(pos_id);\n    this.pos_buffer.putString(surface_form + \",\" + feature);\n\n    return token_info_id;\n};\n\nTokenInfoDictionary.prototype.addMapping = function (source, target) {\n    var mapping = this.target_map[source];\n    if (mapping == null) {\n        mapping = [];\n    }\n    mapping.push(target);\n\n    this.target_map[source] = mapping;\n};\n\nTokenInfoDictionary.prototype.targetMapToBuffer = function () {\n    var buffer = new ByteBuffer();\n    var map_keys_size = Object.keys(this.target_map).length;\n    buffer.putInt(map_keys_size);\n    for (var key in this.target_map) {\n        var values = this.target_map[key];  // Array\n        var map_values_size = values.length;\n        buffer.putInt(parseInt(key));\n        buffer.putInt(map_values_size);\n        for (var i = 0; i < values.length; i++) {\n            buffer.putInt(values[i]);\n        }\n    }\n    return buffer.shrink();  // Shrink-ed Typed Array\n};\n\n// from tid.dat\nTokenInfoDictionary.prototype.loadDictionary = function (array_buffer) {\n    this.dictionary = new ByteBuffer(array_buffer);\n    return this;\n};\n\n// from tid_pos.dat\nTokenInfoDictionary.prototype.loadPosVector = function (array_buffer) {\n    this.pos_buffer = new ByteBuffer(array_buffer);\n    return this;\n};\n\n// from tid_map.dat\nTokenInfoDictionary.prototype.loadTargetMap = function (array_buffer) {\n    var buffer = new ByteBuffer(array_buffer);\n    buffer.position = 0;\n    this.target_map = {};\n    buffer.readInt();  // map_keys_size\n    while (true) {\n        if (buffer.buffer.length < buffer.position + 1) {\n            break;\n        }\n        var key = buffer.readInt();\n        var map_values_size = buffer.readInt();\n        for (var i = 0; i < map_values_size; i++) {\n            var value = buffer.readInt();\n            this.addMapping(key, value);\n        }\n    }\n    return this;\n};\n\n/**\n * Look up features in the dictionary\n * @param {string} token_info_id_str Word ID to look up\n * @returns {string} Features string concatenated by \",\"\n */\nTokenInfoDictionary.prototype.getFeatures = function (token_info_id_str) {\n    var token_info_id = parseInt(token_info_id_str);\n    if (isNaN(token_info_id)) {\n        // TODO throw error\n        return \"\";\n    }\n    var pos_id = this.dictionary.getInt(token_info_id + 6);\n    return this.pos_buffer.getString(pos_id);\n};\n\nmodule.exports = TokenInfoDictionary;\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Convert String (UTF-16) to UTF-8 ArrayBuffer\n *\n * @param {String} str UTF-16 string to convert\n * @return {Uint8Array} Byte sequence encoded by UTF-8\n */\nvar stringToUtf8Bytes = function (str) {\n\n    // Max size of 1 character is 4 bytes\n    var bytes = new Uint8Array(str.length * 4);\n\n    var i = 0, j = 0;\n\n    while (i < str.length) {\n        var unicode_code;\n\n        var utf16_code = str.charCodeAt(i++);\n        if (utf16_code >= 0xD800 && utf16_code <= 0xDBFF) {\n            // surrogate pair\n            var upper = utf16_code;           // high surrogate\n            var lower = str.charCodeAt(i++);  // low surrogate\n\n            if (lower >= 0xDC00 && lower <= 0xDFFF) {\n                unicode_code =\n                    (upper - 0xD800) * (1 << 10) + (1 << 16) +\n                    (lower - 0xDC00);\n            } else {\n                // malformed surrogate pair\n                return null;\n            }\n        } else {\n            // not surrogate code\n            unicode_code = utf16_code;\n        }\n\n        if (unicode_code < 0x80) {\n            // 1-byte\n            bytes[j++] = unicode_code;\n\n        } else if (unicode_code < (1 << 11)) {\n            // 2-byte\n            bytes[j++] = (unicode_code >>> 6) | 0xC0;\n            bytes[j++] = (unicode_code & 0x3F) | 0x80;\n\n        } else if (unicode_code < (1 << 16)) {\n            // 3-byte\n            bytes[j++] = (unicode_code >>> 12) | 0xE0;\n            bytes[j++] = ((unicode_code >> 6) & 0x3f) | 0x80;\n            bytes[j++] = (unicode_code & 0x3F) | 0x80;\n\n        } else if (unicode_code < (1 << 21)) {\n            // 4-byte\n            bytes[j++] = (unicode_code >>> 18) | 0xF0;\n            bytes[j++] = ((unicode_code >> 12) & 0x3F) | 0x80;\n            bytes[j++] = ((unicode_code >> 6) & 0x3F) | 0x80;\n            bytes[j++] = (unicode_code & 0x3F) | 0x80;\n\n        } else {\n            // malformed UCS4 code\n        }\n    }\n\n    return bytes.subarray(0, j);\n};\n\n/**\n * Convert UTF-8 ArrayBuffer to String (UTF-16)\n *\n * @param {Array} bytes UTF-8 byte sequence to convert\n * @return {String} String encoded by UTF-16\n */\nvar utf8BytesToString = function (bytes) {\n\n    var str = \"\";\n    var code, b1, b2, b3, b4, upper, lower;\n    var i = 0;\n\n    while (i < bytes.length) {\n\n        b1 = bytes[i++];\n\n        if (b1 < 0x80) {\n            // 1 byte\n            code = b1;\n        } else if ((b1 >> 5) === 0x06) {\n            // 2 bytes\n            b2 = bytes[i++];\n            code = ((b1 & 0x1f) << 6) | (b2 & 0x3f);\n        } else if ((b1 >> 4) === 0x0e) {\n            // 3 bytes\n            b2 = bytes[i++];\n            b3 = bytes[i++];\n            code = ((b1 & 0x0f) << 12) | ((b2 & 0x3f) << 6) | (b3 & 0x3f);\n        } else {\n            // 4 bytes\n            b2 = bytes[i++];\n            b3 = bytes[i++];\n            b4 = bytes[i++];\n            code = ((b1 & 0x07) << 18) | ((b2 & 0x3f) << 12) | ((b3 & 0x3f) << 6) | (b4 & 0x3f);\n        }\n\n        if (code < 0x10000) {\n            str += String.fromCharCode(code);\n        } else {\n            // surrogate pair\n            code -= 0x10000;\n            upper = (0xD800 | (code >> 10));\n            lower = (0xDC00 | (code & 0x3FF));\n            str += String.fromCharCode(upper, lower);\n        }\n    }\n\n    return str;\n};\n\n/**\n * Utilities to manipulate byte sequence\n * @param {(number|Uint8Array)} arg Initial size of this buffer (number), or buffer to set (Uint8Array)\n * @constructor\n */\nfunction ByteBuffer(arg) {\n    var initial_size;\n    if (arg == null) {\n        initial_size = 1024 * 1024;\n    } else if (typeof arg === \"number\") {\n        initial_size = arg;\n    } else if (arg instanceof Uint8Array) {\n        this.buffer = arg;\n        this.position = 0;  // Overwrite\n        return;\n    } else {\n        // typeof arg -> String\n        throw typeof arg + \" is invalid parameter type for ByteBuffer constructor\";\n    }\n    // arg is null or number\n    this.buffer = new Uint8Array(initial_size);\n    this.position = 0;\n}\n\nByteBuffer.prototype.size = function () {\n    return this.buffer.length;\n};\n\nByteBuffer.prototype.reallocate = function () {\n    var new_array = new Uint8Array(this.buffer.length * 2);\n    new_array.set(this.buffer);\n    this.buffer = new_array;\n};\n\nByteBuffer.prototype.shrink = function () {\n    this.buffer = this.buffer.subarray(0, this.position);\n    return this.buffer;\n};\n\nByteBuffer.prototype.put = function (b) {\n    if (this.buffer.length < this.position + 1) {\n        this.reallocate();\n    }\n    this.buffer[this.position++] = b;\n};\n\nByteBuffer.prototype.get = function (index) {\n    if (index == null) {\n        index = this.position;\n        this.position += 1;\n    }\n    if (this.buffer.length < index + 1) {\n        return 0;\n    }\n    return this.buffer[index];\n};\n\n// Write short to buffer by little endian\nByteBuffer.prototype.putShort = function (num) {\n    if (0xFFFF < num) {\n        throw num + \" is over short value\";\n    }\n    var lower = (0x00FF & num);\n    var upper = (0xFF00 & num) >> 8;\n    this.put(lower);\n    this.put(upper);\n};\n\n// Read short from buffer by little endian\nByteBuffer.prototype.getShort = function (index) {\n    if (index == null) {\n        index = this.position;\n        this.position += 2;\n    }\n    if (this.buffer.length < index + 2) {\n        return 0;\n    }\n    var lower = this.buffer[index];\n    var upper = this.buffer[index + 1];\n    var value = (upper << 8) + lower;\n    if (value & 0x8000) {\n\tvalue = -((value - 1) ^ 0xFFFF);\n    }\n    return value;\n};\n\n// Write integer to buffer by little endian\nByteBuffer.prototype.putInt = function (num) {\n    if (0xFFFFFFFF < num) {\n        throw num + \" is over integer value\";\n    }\n    var b0 = (0x000000FF & num);\n    var b1 = (0x0000FF00 & num) >> 8;\n    var b2 = (0x00FF0000 & num) >> 16;\n    var b3 = (0xFF000000 & num) >> 24;\n    this.put(b0);\n    this.put(b1);\n    this.put(b2);\n    this.put(b3);\n};\n\n// Read integer from buffer by little endian\nByteBuffer.prototype.getInt = function (index) {\n    if (index == null) {\n        index = this.position;\n        this.position += 4;\n    }\n    if (this.buffer.length < index + 4) {\n        return 0;\n    }\n    var b0 = this.buffer[index];\n    var b1 = this.buffer[index + 1];\n    var b2 = this.buffer[index + 2];\n    var b3 = this.buffer[index + 3];\n\n    return (b3 << 24) + (b2 << 16) + (b1 << 8) + b0;\n};\n\nByteBuffer.prototype.readInt = function () {\n    var pos = this.position;\n    this.position += 4;\n    return this.getInt(pos);\n};\n\nByteBuffer.prototype.putString = function (str) {\n    var bytes = stringToUtf8Bytes(str);\n    for (var i = 0; i < bytes.length; i++) {\n        this.put(bytes[i]);\n    }\n    // put null character as terminal character\n    this.put(0);\n};\n\nByteBuffer.prototype.getString = function (index) {\n    var buf = [],\n        ch;\n    if (index == null) {\n        index = this.position;\n    }\n    while (true) {\n        if (this.buffer.length < index + 1) {\n            break;\n        }\n        ch = this.get(index++);\n        if (ch === 0) {\n            break;\n        } else {\n            buf.push(ch);\n        }\n    }\n    this.position = index;\n    return utf8BytesToString(buf);\n};\n\nmodule.exports = ByteBuffer;\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar TokenizerBuilder = require(\"./TokenizerBuilder\");\nvar DictionaryBuilder = require(\"./dict/builder/DictionaryBuilder\");\n\n// Public methods\nvar kuromoji = {\n    builder: function (option) {\n        return new TokenizerBuilder(option);\n    },\n    dictionaryBuilder: function () {\n        return new DictionaryBuilder();\n    }\n};\n\nmodule.exports = kuromoji;\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * ViterbiNode is a node of ViterbiLattice\n * @param {number} node_name Word ID\n * @param {number} node_cost Word cost to generate\n * @param {number} start_pos Start position from 1\n * @param {number} length Word length\n * @param {string} type Node type (KNOWN, UNKNOWN, BOS, EOS, ...)\n * @param {number} left_id Left context ID\n * @param {number} right_id Right context ID\n * @param {string} surface_form Surface form of this word\n * @constructor\n */\nfunction ViterbiNode(node_name, node_cost, start_pos, length, type, left_id, right_id, surface_form) {\n    this.name = node_name;\n    this.cost = node_cost;\n    this.start_pos = start_pos;\n    this.length = length;\n    this.left_id = left_id;\n    this.right_id = right_id;\n    this.prev = null;\n    this.surface_form = surface_form;\n    if (type === \"BOS\") {\n        this.shortest_cost = 0;\n    } else {\n        this.shortest_cost = Number.MAX_VALUE;\n    }\n    this.type = type;\n}\n\nmodule.exports = ViterbiNode;\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * String wrapper for UTF-16 surrogate pair (4 bytes)\n * @param {string} str String to wrap\n * @constructor\n */\nfunction SurrogateAwareString(str) {\n    this.str = str;\n    this.index_mapping = [];\n\n    for (var pos = 0; pos < str.length; pos++) {\n        var ch = str.charAt(pos);\n        this.index_mapping.push(pos);\n        if (SurrogateAwareString.isSurrogatePair(ch)) {\n            pos++;\n        }\n    }\n    // Surrogate aware length\n    this.length = this.index_mapping.length;\n}\n\nSurrogateAwareString.prototype.slice = function (index) {\n    if (this.index_mapping.length <= index) {\n        return \"\";\n    }\n    var surrogate_aware_index = this.index_mapping[index];\n    return this.str.slice(surrogate_aware_index);\n};\n\nSurrogateAwareString.prototype.charAt = function (index) {\n    if (this.str.length <= index) {\n        return \"\";\n    }\n    var surrogate_aware_start_index = this.index_mapping[index];\n    var surrogate_aware_end_index = this.index_mapping[index + 1];\n\n    if (surrogate_aware_end_index == null) {\n        return this.str.slice(surrogate_aware_start_index);\n    }\n    return this.str.slice(surrogate_aware_start_index, surrogate_aware_end_index);\n};\n\nSurrogateAwareString.prototype.charCodeAt = function (index) {\n    if (this.index_mapping.length <= index) {\n        return NaN;\n    }\n    var surrogate_aware_index = this.index_mapping[index];\n    var upper = this.str.charCodeAt(surrogate_aware_index);\n    var lower;\n    if (upper >= 0xD800 && upper <= 0xDBFF && surrogate_aware_index < this.str.length) {\n        lower = this.str.charCodeAt(surrogate_aware_index + 1);\n        if (lower >= 0xDC00 && lower <= 0xDFFF) {\n            return (upper - 0xD800) * 0x400 + lower - 0xDC00 + 0x10000;\n        }\n    }\n    return upper;\n};\n\nSurrogateAwareString.prototype.toString = function () {\n    return this.str;\n};\n\nSurrogateAwareString.isSurrogatePair = function (ch) {\n    var utf16_code = ch.charCodeAt(0);\n    if (utf16_code >= 0xD800 && utf16_code <= 0xDBFF) {\n        // surrogate pair\n        return true;\n    } else {\n        return false;\n    }\n};\n\nmodule.exports = SurrogateAwareString;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar doublearray = require(\"doublearray\");\nvar TokenInfoDictionary = require(\"./TokenInfoDictionary\");\nvar ConnectionCosts = require(\"./ConnectionCosts\");\nvar UnknownDictionary = require(\"./UnknownDictionary\");\n\n/**\n * Dictionaries container for Tokenizer\n * @param {DoubleArray} trie\n * @param {TokenInfoDictionary} token_info_dictionary\n * @param {ConnectionCosts} connection_costs\n * @param {UnknownDictionary} unknown_dictionary\n * @constructor\n */\nfunction DynamicDictionaries(trie, token_info_dictionary, connection_costs, unknown_dictionary) {\n    if (trie != null) {\n        this.trie = trie;\n    } else {\n        this.trie = doublearray.builder(0).build([\n            {k: \"\", v: 1}\n        ]);\n    }\n    if (token_info_dictionary != null) {\n        this.token_info_dictionary = token_info_dictionary;\n    } else {\n        this.token_info_dictionary = new TokenInfoDictionary();\n    }\n    if (connection_costs != null) {\n        this.connection_costs = connection_costs;\n    } else {\n        // backward_size * backward_size\n        this.connection_costs = new ConnectionCosts(0, 0);\n    }\n    if (unknown_dictionary != null) {\n        this.unknown_dictionary = unknown_dictionary;\n    } else {\n        this.unknown_dictionary = new UnknownDictionary();\n    }\n}\n\n// from base.dat & check.dat\nDynamicDictionaries.prototype.loadTrie = function (base_buffer, check_buffer) {\n    this.trie = doublearray.load(base_buffer, check_buffer);\n    return this;\n};\n\nDynamicDictionaries.prototype.loadTokenInfoDictionaries = function (token_info_buffer, pos_buffer, target_map_buffer) {\n    this.token_info_dictionary.loadDictionary(token_info_buffer);\n    this.token_info_dictionary.loadPosVector(pos_buffer);\n    this.token_info_dictionary.loadTargetMap(target_map_buffer);\n    return this;\n};\n\nDynamicDictionaries.prototype.loadConnectionCosts = function (cc_buffer) {\n    this.connection_costs.loadConnectionCosts(cc_buffer);\n    return this;\n};\n\nDynamicDictionaries.prototype.loadUnknownDictionaries = function (unk_buffer, unk_pos_buffer, unk_map_buffer, cat_map_buffer, compat_cat_map_buffer, invoke_def_buffer) {\n    this.unknown_dictionary.loadUnknownDictionaries(unk_buffer, unk_pos_buffer, unk_map_buffer, cat_map_buffer, compat_cat_map_buffer, invoke_def_buffer);\n    return this;\n};\n\nmodule.exports = DynamicDictionaries;\n","// Copyright (c) 2014 Takuya Asano All Rights Reserved.\n\n(function () {\n\n    \"use strict\";\n\n    var TERM_CHAR = \"\\u0000\", // terminal character\n        TERM_CODE = 0,        // terminal character code\n        ROOT_ID = 0,          // index of root node\n        NOT_FOUND = -1,       // traverse() returns if no nodes found\n        BASE_SIGNED = true,\n        CHECK_SIGNED = true,\n        BASE_BYTES = 4,\n        CHECK_BYTES = 4,\n        MEMORY_EXPAND_RATIO = 2;\n\n\n    var newBC = function (initial_size) {\n\n        if (initial_size == null) {\n            initial_size = 1024;\n        }\n\n        var initBase = function (_base, start, end) {  // 'end' index does not include\n            for (var i = start; i < end; i++) {\n                _base[i] = - i + 1;  // inversed previous empty node index\n            }\n            if (0 < check.array[check.array.length - 1]) {\n                var last_used_id = check.array.length - 2;\n                while (0 < check.array[last_used_id]) {\n                    last_used_id--;\n                }\n                _base[start] = - last_used_id;\n            }\n        };\n\n        var initCheck = function (_check, start, end) {\n            for (var i = start; i < end; i++) {\n                _check[i] = - i - 1;  // inversed next empty node index\n            }\n        };\n\n        var realloc = function (min_size) {\n            // expand arrays size by given ratio\n            var new_size = min_size * MEMORY_EXPAND_RATIO;\n            // console.log('re-allocate memory to ' + new_size);\n\n            var base_new_array = newArrayBuffer(base.signed, base.bytes, new_size);\n            initBase(base_new_array, base.array.length, new_size);  // init BASE in new range\n            base_new_array.set(base.array);\n            base.array = null;  // explicit GC\n            base.array = base_new_array;\n\n            var check_new_array = newArrayBuffer(check.signed, check.bytes, new_size);\n            initCheck(check_new_array, check.array.length, new_size);  // init CHECK in new range\n            check_new_array.set(check.array);\n            check.array = null;  // explicit GC\n            check.array = check_new_array;\n        };\n\n        var first_unused_node = ROOT_ID + 1;\n\n        var base = {\n            signed: BASE_SIGNED,\n            bytes: BASE_BYTES,\n            array: newArrayBuffer(BASE_SIGNED, BASE_BYTES, initial_size)\n        };\n\n        var check = {\n            signed: CHECK_SIGNED,\n            bytes: CHECK_BYTES,\n            array: newArrayBuffer(CHECK_SIGNED, CHECK_BYTES, initial_size)\n        };\n\n        // init root node\n        base.array[ROOT_ID] = 1;\n        check.array[ROOT_ID] = ROOT_ID;\n\n        // init BASE\n        initBase(base.array, ROOT_ID + 1, base.array.length);\n\n        // init CHECK\n        initCheck(check.array, ROOT_ID + 1, check.array.length);\n\n        return {\n            getBaseBuffer: function () {\n                return base.array;\n            },\n            getCheckBuffer: function () {\n                return check.array;\n            },\n            loadBaseBuffer: function (base_buffer) {\n                base.array = base_buffer;\n                return this;\n            },\n            loadCheckBuffer: function (check_buffer) {\n                check.array = check_buffer;\n                return this;\n            },\n            size: function () {\n                return Math.max(base.array.length, check.array.length);\n            },\n            getBase: function (index) {\n                if (base.array.length - 1 < index) {\n                    return - index + 1;\n                    // realloc(index);\n                }\n                // if (!Number.isFinite(base.array[index])) {\n                //     console.log('getBase:' + index);\n                //     throw 'getBase' + index;\n                // }\n                return base.array[index];\n            },\n            getCheck: function (index) {\n                if (check.array.length - 1 < index) {\n                    return - index - 1;\n                    // realloc(index);\n                }\n                // if (!Number.isFinite(check.array[index])) {\n                //     console.log('getCheck:' + index);\n                //     throw 'getCheck' + index;\n                // }\n                return check.array[index];\n            },\n            setBase: function (index, base_value) {\n                if (base.array.length - 1 < index) {\n                    realloc(index);\n                }\n                base.array[index] = base_value;\n            },\n            setCheck: function (index, check_value) {\n                if (check.array.length - 1 < index) {\n                    realloc(index);\n                }\n                check.array[index] = check_value;\n            },\n            setFirstUnusedNode: function (index) {\n                // if (!Number.isFinite(index)) {\n                //     throw 'assertion error: setFirstUnusedNode ' + index + ' is not finite number';\n                // }\n                first_unused_node = index;\n            },\n            getFirstUnusedNode: function () {\n                // if (!Number.isFinite(first_unused_node)) {\n                //     throw 'assertion error: getFirstUnusedNode ' + first_unused_node + ' is not finite number';\n                // }\n                return first_unused_node;\n            },\n            shrink: function () {\n                var last_index = this.size() - 1;\n                while (true) {\n                    if (0 <= check.array[last_index]) {\n                        break;\n                    }\n                    last_index--;\n                }\n                base.array = base.array.subarray(0, last_index + 2);   // keep last unused node\n                check.array = check.array.subarray(0, last_index + 2); // keep last unused node\n            },\n            calc: function () {\n                var unused_count = 0;\n                var size = check.array.length;\n                for (var i = 0; i < size; i++) {\n                    if (check.array[i] < 0) {\n                        unused_count++;\n                    }\n                }\n                return {\n                    all: size,\n                    unused: unused_count,\n                    efficiency: (size - unused_count) / size\n                };\n            },\n            dump: function () {\n                // for debug\n                var dump_base = \"\";\n                var dump_check = \"\";\n\n                var i;\n                for (i = 0; i < base.array.length; i++) {\n                    dump_base = dump_base + \" \" + this.getBase(i);\n                }\n                for (i = 0; i < check.array.length; i++) {\n                    dump_check = dump_check + \" \" + this.getCheck(i);\n                }\n\n                console.log(\"base:\" + dump_base);\n                console.log(\"chck:\" + dump_check);\n\n                return \"base:\" + dump_base + \" chck:\" + dump_check;\n            }\n        };\n    };\n\n\n    /**\n     * Factory method of double array\n     */\n    function DoubleArrayBuilder(initial_size) {\n        this.bc = newBC(initial_size);  // BASE and CHECK\n        this.keys = [];\n    }\n\n\n    /**\n     * Append a key to initialize set\n     * (This method should be called by dictionary ordered key)\n     *\n     * @param {String} key\n     * @param {Number} value Integer value from 0 to max signed integer number - 1\n     */\n    DoubleArrayBuilder.prototype.append = function (key, record) {\n        this.keys.push({ k: key, v: record });\n        return this;\n    };\n\n    /**\n     * Build double array for given keys\n     *\n     * @param {Array} keys Array of keys. A key is a Object which has properties 'k', 'v'.\n     * 'k' is a key string, 'v' is a record assigned to that key.\n     * @return {DoubleArray} Compiled double array\n     */\n    DoubleArrayBuilder.prototype.build = function (keys, sorted) {\n\n        if (keys == null) {\n            keys = this.keys;\n        }\n\n        if (keys == null) {\n            return new DoubleArray(this.bc);\n        }\n\n        if (sorted == null) {\n            sorted = false;\n        }\n\n        // Convert key string to ArrayBuffer\n        var buff_keys =\n            keys.map(function (k) {\n                return {\n                    k: stringToUtf8Bytes(k.k + TERM_CHAR),\n                    v: k.v\n                };\n            });\n\n        // Sort keys by byte order\n        if (sorted) {\n            this.keys = buff_keys;\n        } else {\n            this.keys =\n                buff_keys.sort(function (k1, k2) {\n                    var b1 = k1.k;\n                    var b2 = k2.k;\n                    var min_length = Math.min(b1.length, b2.length);\n                    for (var pos = 0; pos < min_length; pos++) {\n                        if (b1[pos] === b2[pos]) {\n                            continue;\n                        }\n                        return b1[pos] - b2[pos];\n                    }\n                    return b1.length - b2.length;\n                });\n        }\n\n        buff_keys = null;  // explicit GC\n\n        this._build(ROOT_ID, 0, 0, this.keys.length);\n        return new DoubleArray(this.bc);\n    };\n\n    /**\n     * Append nodes to BASE and CHECK array recursively\n     */\n    DoubleArrayBuilder.prototype._build = function (parent_index, position, start, length) {\n\n        var children_info = this.getChildrenInfo(position, start, length);\n        var _base = this.findAllocatableBase(children_info);\n\n        this.setBC(parent_index, children_info, _base);\n\n        for (var i = 0; i < children_info.length; i = i + 3) {\n            var child_code = children_info[i];\n            if (child_code === TERM_CODE) {\n                continue;\n            }\n            var child_start = children_info[i + 1];\n            var child_len = children_info[i + 2];\n            var child_index = _base + child_code;\n            this._build(child_index, position + 1, child_start, child_len);\n        }\n    };\n\n    DoubleArrayBuilder.prototype.getChildrenInfo = function (position, start, length) {\n        var current_char = this.keys[start].k[position];\n        var i = 0;\n        var children_info = new Int32Array(length * 3);\n\n        children_info[i++] = current_char;  // char (current)\n        children_info[i++] = start;         // start index (current)\n\n        var next_pos = start;\n        var start_pos = start;\n        for (; next_pos < start + length; next_pos++) {\n            var next_char = this.keys[next_pos].k[position];\n            if (current_char !== next_char) {\n                children_info[i++] = next_pos - start_pos;  // length (current)\n\n                children_info[i++] = next_char;             // char (next)\n                children_info[i++] = next_pos;              // start index (next)\n                current_char = next_char;\n                start_pos = next_pos;\n            }\n        }\n        children_info[i++] = next_pos - start_pos;\n        children_info = children_info.subarray(0, i);\n\n        return children_info;\n    };\n\n    DoubleArrayBuilder.prototype.setBC = function (parent_id, children_info, _base) {\n\n        var bc = this.bc;\n\n        bc.setBase(parent_id, _base);  // Update BASE of parent node\n\n        var i;\n        for (i = 0; i < children_info.length; i = i + 3) {\n            var code = children_info[i];\n            var child_id = _base + code;\n\n            // Update linked list of unused nodes\n\n            // Assertion\n            // if (child_id < 0) {\n            //     throw 'assertion error: child_id is negative'\n            // }\n\n            var prev_unused_id = - bc.getBase(child_id);\n            var next_unused_id = - bc.getCheck(child_id);\n            // if (prev_unused_id < 0) {\n            //     throw 'assertion error: setBC'\n            // }\n            // if (next_unused_id < 0) {\n            //     throw 'assertion error: setBC'\n            // }\n            if (child_id !== bc.getFirstUnusedNode()) {\n                bc.setCheck(prev_unused_id, - next_unused_id);\n            } else {\n                // Update first_unused_node\n                bc.setFirstUnusedNode(next_unused_id);\n            }\n            bc.setBase(next_unused_id, - prev_unused_id);\n\n            var check = parent_id;         // CHECK is parent node index\n            bc.setCheck(child_id, check);  // Update CHECK of child node\n\n            // Update record\n            if (code === TERM_CODE) {\n                var start_pos = children_info[i + 1];\n                // var len = children_info[i + 2];\n                // if (len != 1) {\n                //     throw 'assertion error: there are multiple terminal nodes. len:' + len;\n                // }\n                var value = this.keys[start_pos].v;\n\n                if (value == null) {\n                    value = 0;\n                }\n\n                var base = - value - 1;       // BASE is inverted record value\n                bc.setBase(child_id, base);  // Update BASE of child(leaf) node\n            }\n        }\n    };\n\n\n    /**\n     * Find BASE value that all children are allocatable in double array's region\n     */\n    DoubleArrayBuilder.prototype.findAllocatableBase = function (children_info) {\n\n        var bc = this.bc;\n\n        // Assertion: keys are sorted by byte order\n        // var c = -1;\n        // for (var i = 0; i < children_info.length; i = i + 3) {\n        //     if (children_info[i] < c) {\n        //         throw 'assertion error: not sort key'\n        //     }\n        //     c = children_info[i];\n        // }\n\n        // iterate linked list of unused nodes\n        var _base;\n        var curr = bc.getFirstUnusedNode();  // current index\n        // if (curr < 0) {\n        //     throw 'assertion error: getFirstUnusedNode returns negative value'\n        // }\n\n        while (true) {\n            _base = curr - children_info[0];\n\n            if (_base < 0) {\n                curr = - bc.getCheck(curr);  // next\n\n                // if (curr < 0) {\n                //     throw 'assertion error: getCheck returns negative value'\n                // }\n\n                continue;\n            }\n\n            var empty_area_found = true;\n            for (var i = 0; i < children_info.length; i = i + 3) {\n                var code = children_info[i];\n                var candidate_id = _base + code;\n\n                if (!this.isUnusedNode(candidate_id)) {\n                    // candidate_id is used node\n                    // next\n                    curr = - bc.getCheck(curr);\n                    // if (curr < 0) {\n                    //     throw 'assertion error: getCheck returns negative value'\n                    // }\n\n                    empty_area_found = false;\n                    break;\n                }\n            }\n            if (empty_area_found) {\n                // Area is free\n                return _base;\n            }\n        }\n    };\n\n    /**\n     * Check this double array index is unused or not\n     */\n    DoubleArrayBuilder.prototype.isUnusedNode = function (index) {\n        var bc = this.bc;\n        var check = bc.getCheck(index);\n\n        // if (index < 0) {\n        //     throw 'assertion error: isUnusedNode index:' + index;\n        // }\n\n        if (index === ROOT_ID) {\n            // root node\n            return false;\n        }\n        if (check < 0) {\n            // unused\n            return true;\n        }\n\n        // used node (incl. leaf)\n        return false;\n    };\n\n\n    /**\n     * Factory method of double array\n     */\n    function DoubleArray(bc) {\n        this.bc = bc;       // BASE and CHECK\n        this.bc.shrink();\n    }\n\n\n    /**\n     * Look up a given key in this trie\n     *\n     * @param {String} key\n     * @return {Boolean} True if this trie contains a given key\n     */\n    DoubleArray.prototype.contain = function (key) {\n\n        var bc = this.bc;\n\n        key += TERM_CHAR;\n        var buffer = stringToUtf8Bytes(key);\n\n        var parent = ROOT_ID;\n        var child = NOT_FOUND;\n\n        for (var i = 0; i < buffer.length; i++) {\n            var code = buffer[i];\n\n            child = this.traverse(parent, code);\n            if (child === NOT_FOUND) {\n                return false;\n            }\n\n            if (bc.getBase(child) <= 0) {\n                // leaf node\n                return true;\n            } else {\n                // not leaf\n                parent = child;\n                continue;\n            }\n        }\n        return false;\n    };\n\n\n    /**\n     * Look up a given key in this trie\n     *\n     * @param {String} key\n     * @return {Number} Record value assgned to this key, -1 if this key does not contain\n     */\n    DoubleArray.prototype.lookup = function (key) {\n\n        key += TERM_CHAR;\n        var buffer = stringToUtf8Bytes(key);\n\n        var parent = ROOT_ID;\n        var child = NOT_FOUND;\n\n        for (var i = 0; i < buffer.length; i++) {\n            var code = buffer[i];\n            child = this.traverse(parent, code);\n            if (child === NOT_FOUND) {\n                return NOT_FOUND;\n            }\n            parent = child;\n        }\n\n        var base = this.bc.getBase(child);\n        if (base <= 0) {\n            // leaf node\n            return - base - 1;\n        } else {\n            // not leaf\n            return NOT_FOUND;\n        }\n    };\n\n\n    /**\n     * Common prefix search\n     *\n     * @param {String} key\n     * @return {Array} Each result object has 'k' and 'v' (key and record,\n     * respectively) properties assigned to matched string\n     */\n    DoubleArray.prototype.commonPrefixSearch = function (key) {\n\n        var buffer = stringToUtf8Bytes(key);\n\n        var parent = ROOT_ID;\n        var child = NOT_FOUND;\n\n        var result = [];\n\n        for (var i = 0; i < buffer.length; i++) {\n            var code = buffer[i];\n\n            child = this.traverse(parent, code);\n\n            if (child !== NOT_FOUND) {\n                parent = child;\n\n                // look forward by terminal character code to check this node is a leaf or not\n                var grand_child = this.traverse(child, TERM_CODE);\n\n                if (grand_child !== NOT_FOUND) {\n                    var base = this.bc.getBase(grand_child);\n\n                    var r = {};\n\n                    if (base <= 0) {\n                        // If child is a leaf node, add record to result\n                        r.v = - base - 1;\n                    }\n\n                    // If child is a leaf node, add word to result\n                    r.k = utf8BytesToString(arrayCopy(buffer, 0, i + 1));\n\n                    result.push(r);\n                }\n                continue;\n            } else {\n                break;\n            }\n        }\n\n        return result;\n    };\n\n    DoubleArray.prototype.traverse = function (parent, code) {\n        var child = this.bc.getBase(parent) + code;\n        if (this.bc.getCheck(child) === parent) {\n            return child;\n        } else {\n            return NOT_FOUND;\n        }\n    };\n\n    DoubleArray.prototype.size = function () {\n        return this.bc.size();\n    };\n\n    DoubleArray.prototype.calc = function () {\n        return this.bc.calc();\n    };\n\n    DoubleArray.prototype.dump = function () {\n        return this.bc.dump();\n    };\n\n\n    // Array utility functions\n\n    var newArrayBuffer = function (signed, bytes, size) {\n        if (signed) {\n            switch(bytes) {\n                case 1:\n                return new Int8Array(size);\n                case 2:\n                return new Int16Array(size);\n                case 4:\n                return new Int32Array(size);\n                default:\n                throw new RangeError(\"Invalid newArray parameter element_bytes:\" + bytes);\n            }\n        } else {\n            switch(bytes) {\n                case 1:\n                return new Uint8Array(size);\n                case 2:\n                return new Uint16Array(size);\n                case 4:\n                return new Uint32Array(size);\n                default:\n                throw new RangeError(\"Invalid newArray parameter element_bytes:\" + bytes);\n            }\n        }\n    };\n\n    var arrayCopy = function (src, src_offset, length) {\n        var buffer = new ArrayBuffer(length);\n        var dstU8 = new Uint8Array(buffer, 0, length);\n        var srcU8 = src.subarray(src_offset, length);\n        dstU8.set(srcU8);\n        return dstU8;\n    };\n\n\n    /**\n     * Convert String (UTF-16) to UTF-8 ArrayBuffer\n     *\n     * @param {String} str UTF-16 string to convert\n     * @return {Uint8Array} Byte sequence encoded by UTF-8\n     */\n    var stringToUtf8Bytes = function (str) {\n\n        // Max size of 1 character is 4 bytes\n        var bytes = new Uint8Array(new ArrayBuffer(str.length * 4));\n\n        var i = 0, j = 0;\n\n        while (i < str.length) {\n            var unicode_code;\n\n            var utf16_code = str.charCodeAt(i++);\n            if (utf16_code >= 0xD800 && utf16_code <= 0xDBFF) {\n                // surrogate pair\n                var upper = utf16_code;           // high surrogate\n                var lower = str.charCodeAt(i++);  // low surrogate\n\n                if (lower >= 0xDC00 && lower <= 0xDFFF) {\n                    unicode_code =\n                        (upper - 0xD800) * (1 << 10) + (1 << 16) +\n                        (lower - 0xDC00);\n                } else {\n                    // malformed surrogate pair\n                    return null;\n                }\n            } else {\n                // not surrogate code\n                unicode_code = utf16_code;\n            }\n\n            if (unicode_code < 0x80) {\n                // 1-byte\n                bytes[j++] = unicode_code;\n\n            } else if (unicode_code < (1 << 11)) {\n                // 2-byte\n                bytes[j++] = (unicode_code >>> 6) | 0xC0;\n                bytes[j++] = (unicode_code & 0x3F) | 0x80;\n\n            } else if (unicode_code < (1 << 16)) {\n                // 3-byte\n                bytes[j++] = (unicode_code >>> 12) | 0xE0;\n                bytes[j++] = ((unicode_code >> 6) & 0x3f) | 0x80;\n                bytes[j++] = (unicode_code & 0x3F) | 0x80;\n\n            } else if (unicode_code < (1 << 21)) {\n                // 4-byte\n                bytes[j++] = (unicode_code >>> 18) | 0xF0;\n                bytes[j++] = ((unicode_code >> 12) & 0x3F) | 0x80;\n                bytes[j++] = ((unicode_code >> 6) & 0x3F) | 0x80;\n                bytes[j++] = (unicode_code & 0x3F) | 0x80;\n\n            } else {\n                // malformed UCS4 code\n            }\n        }\n\n        return bytes.subarray(0, j);\n    };\n\n\n    /**\n     * Convert UTF-8 ArrayBuffer to String (UTF-16)\n     *\n     * @param {Uint8Array} bytes UTF-8 byte sequence to convert\n     * @return {String} String encoded by UTF-16\n     */\n    var utf8BytesToString = function (bytes) {\n\n        var str = \"\";\n        var code, b1, b2, b3, b4, upper, lower;\n        var i = 0;\n\n        while (i < bytes.length) {\n\n            b1 = bytes[i++];\n\n            if (b1 < 0x80) {\n                // 1 byte\n                code = b1;\n            } else if ((b1 >> 5) === 0x06) {\n                // 2 bytes\n                b2 = bytes[i++];\n                code = ((b1 & 0x1f) << 6) | (b2 & 0x3f);\n            } else if ((b1 >> 4) === 0x0e) {\n                // 3 bytes\n                b2 = bytes[i++];\n                b3 = bytes[i++];\n                code = ((b1 & 0x0f) << 12) | ((b2 & 0x3f) << 6) | (b3 & 0x3f);\n            } else {\n                // 4 bytes\n                b2 = bytes[i++];\n                b3 = bytes[i++];\n                b4 = bytes[i++];\n                code = ((b1 & 0x07) << 18) | ((b2 & 0x3f) << 12) | ((b3 & 0x3f) << 6) | (b4 & 0x3f);\n            }\n\n            if (code < 0x10000) {\n\t            str += String.fromCharCode(code);\n            } else {\n\t            // surrogate pair\n\t            code -= 0x10000;\n\t            upper = (0xD800 | (code >> 10));\n\t            lower = (0xDC00 | (code & 0x3FF));\n\t            str += String.fromCharCode(upper, lower);\n            }\n        }\n\n        return str;\n    };\n\n\n    // public methods\n    var doublearray = {\n        builder: function (initial_size) {\n            return new DoubleArrayBuilder(initial_size);\n        },\n        load: function (base_buffer, check_buffer) {\n            var bc = newBC(0);\n            bc.loadBaseBuffer(base_buffer);\n            bc.loadCheckBuffer(check_buffer);\n            return new DoubleArray(bc);\n        }\n    };\n\n    if (\"undefined\" === typeof module) {\n\t    // In browser\n        window.doublearray = doublearray;\n    } else {\n\t    // In node\n        module.exports = doublearray;\n    }\n\n})();\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Connection costs matrix from cc.dat file.\n * 2 dimension matrix [forward_id][backward_id] -> cost\n * @constructor\n * @param {number} forward_dimension\n * @param {number} backward_dimension\n */\nfunction ConnectionCosts(forward_dimension, backward_dimension) {\n    this.forward_dimension = forward_dimension;\n    this.backward_dimension = backward_dimension;\n\n    // leading 2 integers for forward_dimension, backward_dimension, respectively\n    this.buffer = new Int16Array(forward_dimension * backward_dimension + 2);\n    this.buffer[0] = forward_dimension;\n    this.buffer[1] = backward_dimension;\n}\n\nConnectionCosts.prototype.put = function (forward_id, backward_id, cost) {\n    var index = forward_id * this.backward_dimension + backward_id + 2;\n    if (this.buffer.length < index + 1) {\n        throw \"ConnectionCosts buffer overflow\";\n    }\n    this.buffer[index] = cost;\n};\n\nConnectionCosts.prototype.get = function (forward_id, backward_id) {\n    var index = forward_id * this.backward_dimension + backward_id + 2;\n    if (this.buffer.length < index + 1) {\n        throw \"ConnectionCosts buffer overflow\";\n    }\n    return this.buffer[index];\n};\n\nConnectionCosts.prototype.loadConnectionCosts = function (connection_costs_buffer) {\n    this.forward_dimension = connection_costs_buffer[0];\n    this.backward_dimension = connection_costs_buffer[1];\n    this.buffer = connection_costs_buffer;\n};\n\nmodule.exports = ConnectionCosts;\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar TokenInfoDictionary = require(\"./TokenInfoDictionary\");\nvar CharacterDefinition = require(\"./CharacterDefinition\");\nvar ByteBuffer = require(\"../util/ByteBuffer\");\n\n/**\n * UnknownDictionary\n * @constructor\n */\nfunction UnknownDictionary() {\n    this.dictionary = new ByteBuffer(10 * 1024 * 1024);\n    this.target_map = {};  // class_id (of CharacterClass) -> token_info_id (of unknown class)\n    this.pos_buffer = new ByteBuffer(10 * 1024 * 1024);\n    this.character_definition = null;\n}\n\n// Inherit from TokenInfoDictionary as a super class\nUnknownDictionary.prototype = Object.create(TokenInfoDictionary.prototype);\n\nUnknownDictionary.prototype.characterDefinition = function (character_definition) {\n    this.character_definition = character_definition;\n    return this;\n};\n\nUnknownDictionary.prototype.lookup = function (ch) {\n    return this.character_definition.lookup(ch);\n};\n\nUnknownDictionary.prototype.lookupCompatibleCategory = function (ch) {\n    return this.character_definition.lookupCompatibleCategory(ch);\n};\n\nUnknownDictionary.prototype.loadUnknownDictionaries = function (unk_buffer, unk_pos_buffer, unk_map_buffer, cat_map_buffer, compat_cat_map_buffer, invoke_def_buffer) {\n    this.loadDictionary(unk_buffer);\n    this.loadPosVector(unk_pos_buffer);\n    this.loadTargetMap(unk_map_buffer);\n    this.character_definition = CharacterDefinition.load(cat_map_buffer, compat_cat_map_buffer, invoke_def_buffer);\n};\n\nmodule.exports = UnknownDictionary;\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar InvokeDefinitionMap = require(\"./InvokeDefinitionMap\");\nvar CharacterClass = require(\"./CharacterClass\");\nvar SurrogateAwareString = require(\"../util/SurrogateAwareString\");\n\nvar DEFAULT_CATEGORY = \"DEFAULT\";\n\n/**\n * CharacterDefinition represents char.def file and\n * defines behavior of unknown word processing\n * @constructor\n */\nfunction CharacterDefinition() {\n    this.character_category_map = new Uint8Array(65536);  // for all UCS2 code points\n    this.compatible_category_map = new Uint32Array(65536);  // for all UCS2 code points\n    this.invoke_definition_map = null;\n}\n\n/**\n * Load CharacterDefinition\n * @param {Uint8Array} cat_map_buffer\n * @param {Uint32Array} compat_cat_map_buffer\n * @param {InvokeDefinitionMap} invoke_def_buffer\n * @returns {CharacterDefinition}\n */\nCharacterDefinition.load = function (cat_map_buffer, compat_cat_map_buffer, invoke_def_buffer) {\n    var char_def = new CharacterDefinition();\n    char_def.character_category_map = cat_map_buffer;\n    char_def.compatible_category_map = compat_cat_map_buffer;\n    char_def.invoke_definition_map = InvokeDefinitionMap.load(invoke_def_buffer);\n    return char_def;\n};\n\nCharacterDefinition.parseCharCategory = function (class_id, parsed_category_def) {\n    var category = parsed_category_def[1];\n    var invoke = parseInt(parsed_category_def[2]);\n    var grouping = parseInt(parsed_category_def[3]);\n    var max_length = parseInt(parsed_category_def[4]);\n    if (!isFinite(invoke) || (invoke !== 0 && invoke !== 1)) {\n        console.log(\"char.def parse error. INVOKE is 0 or 1 in:\" + invoke);\n        return null;\n    }\n    if (!isFinite(grouping) || (grouping !== 0 && grouping !== 1)) {\n        console.log(\"char.def parse error. GROUP is 0 or 1 in:\" + grouping);\n        return null;\n    }\n    if (!isFinite(max_length) || max_length < 0) {\n        console.log(\"char.def parse error. LENGTH is 1 to n:\" + max_length);\n        return null;\n    }\n    var is_invoke = (invoke === 1);\n    var is_grouping = (grouping === 1);\n\n    return new CharacterClass(class_id, category, is_invoke, is_grouping, max_length);\n};\n\nCharacterDefinition.parseCategoryMapping = function (parsed_category_mapping) {\n    var start = parseInt(parsed_category_mapping[1]);\n    var default_category = parsed_category_mapping[2];\n    var compatible_category = (3 < parsed_category_mapping.length) ? parsed_category_mapping.slice(3) : [];\n    if (!isFinite(start) || start < 0 || start > 0xFFFF) {\n        console.log(\"char.def parse error. CODE is invalid:\" + start);\n    }\n    return { start: start, default: default_category, compatible: compatible_category};\n};\n\nCharacterDefinition.parseRangeCategoryMapping = function (parsed_category_mapping) {\n    var start = parseInt(parsed_category_mapping[1]);\n    var end = parseInt(parsed_category_mapping[2]);\n    var default_category = parsed_category_mapping[3];\n    var compatible_category = (4 < parsed_category_mapping.length) ? parsed_category_mapping.slice(4) : [];\n    if (!isFinite(start) || start < 0 || start > 0xFFFF) {\n        console.log(\"char.def parse error. CODE is invalid:\" + start);\n    }\n    if (!isFinite(end) || end < 0 || end > 0xFFFF) {\n        console.log(\"char.def parse error. CODE is invalid:\" + end);\n    }\n    return { start: start, end: end, default: default_category, compatible: compatible_category};\n};\n\n/**\n * Initializing method\n * @param {Array} category_mapping Array of category mapping\n */\nCharacterDefinition.prototype.initCategoryMappings = function (category_mapping) {\n    // Initialize map by DEFAULT class\n    var code_point;\n    if (category_mapping != null) {\n        for (var i = 0; i < category_mapping.length; i++) {\n            var mapping = category_mapping[i];\n            var end = mapping.end || mapping.start;\n            for (code_point = mapping.start; code_point <= end; code_point++) {\n\n                // Default Category class ID\n                this.character_category_map[code_point] = this.invoke_definition_map.lookup(mapping.default);\n\n                for (var j = 0; j < mapping.compatible.length; j++) {\n                    var bitset = this.compatible_category_map[code_point];\n                    var compatible_category = mapping.compatible[j];\n                    if (compatible_category == null) {\n                        continue;\n                    }\n                    var class_id = this.invoke_definition_map.lookup(compatible_category);  // Default Category\n                    if (class_id == null) {\n                        continue;\n                    }\n                    var class_id_bit = 1 << class_id;\n                    bitset = bitset | class_id_bit;  // Set a bit of class ID 例えば、class_idが3のとき、3ビット目に1を立てる\n                    this.compatible_category_map[code_point] = bitset;\n                }\n            }\n        }\n    }\n    var default_id = this.invoke_definition_map.lookup(DEFAULT_CATEGORY);\n    if (default_id == null) {\n        return;\n    }\n    for (code_point = 0; code_point < this.character_category_map.length; code_point++) {\n        // 他に何のクラスも定義されていなかったときだけ DEFAULT\n        if (this.character_category_map[code_point] === 0) {\n            // DEFAULT class ID に対応するビットだけ1を立てる\n            this.character_category_map[code_point] = 1 << default_id;\n        }\n    }\n};\n\n/**\n * Lookup compatible categories for a character (not included 1st category)\n * @param {string} ch UCS2 character (just 1st character is effective)\n * @returns {Array.<CharacterClass>} character classes\n */\nCharacterDefinition.prototype.lookupCompatibleCategory = function (ch) {\n    var classes = [];\n\n    /*\n     if (SurrogateAwareString.isSurrogatePair(ch)) {\n     // Surrogate pair character codes can not be defined by char.def\n     return classes;\n     }*/\n    var code = ch.charCodeAt(0);\n    var integer;\n    if (code < this.compatible_category_map.length) {\n        integer = this.compatible_category_map[code];  // Bitset\n    }\n\n    if (integer == null || integer === 0) {\n        return classes;\n    }\n\n    for (var bit = 0; bit < 32; bit++) {  // Treat \"bit\" as a class ID\n        if (((integer << (31 - bit)) >>> 31) === 1) {\n            var character_class = this.invoke_definition_map.getCharacterClass(bit);\n            if (character_class == null) {\n                continue;\n            }\n            classes.push(character_class);\n        }\n    }\n    return classes;\n};\n\n\n/**\n * Lookup category for a character\n * @param {string} ch UCS2 character (just 1st character is effective)\n * @returns {CharacterClass} character class\n */\nCharacterDefinition.prototype.lookup = function (ch) {\n\n    var class_id;\n\n    var code = ch.charCodeAt(0);\n    if (SurrogateAwareString.isSurrogatePair(ch)) {\n        // Surrogate pair character codes can not be defined by char.def, so set DEFAULT category\n        class_id = this.invoke_definition_map.lookup(DEFAULT_CATEGORY);\n    } else if (code < this.character_category_map.length) {\n        class_id = this.character_category_map[code];  // Read as integer value\n    }\n\n    if (class_id == null) {\n        class_id = this.invoke_definition_map.lookup(DEFAULT_CATEGORY);\n    }\n\n    return this.invoke_definition_map.getCharacterClass(class_id);\n};\n\nmodule.exports = CharacterDefinition;\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar ByteBuffer = require(\"../util/ByteBuffer\");\nvar CharacterClass = require(\"./CharacterClass\");\n\n/**\n * InvokeDefinitionMap represents invoke definition a part of char.def\n * @constructor\n */\nfunction InvokeDefinitionMap() {\n    this.map = [];\n    this.lookup_table = {};  // Just for building dictionary\n}\n\n/**\n * Load InvokeDefinitionMap from buffer\n * @param {Uint8Array} invoke_def_buffer\n * @returns {InvokeDefinitionMap}\n */\nInvokeDefinitionMap.load = function (invoke_def_buffer) {\n    var invoke_def = new InvokeDefinitionMap();\n    var character_category_definition = [];\n\n    var buffer = new ByteBuffer(invoke_def_buffer);\n    while (buffer.position + 1 < buffer.size()) {\n        var class_id = character_category_definition.length;\n        var is_always_invoke = buffer.get();\n        var is_grouping = buffer.get();\n        var max_length = buffer.getInt();\n        var class_name = buffer.getString();\n        character_category_definition.push(new CharacterClass(class_id, class_name, is_always_invoke, is_grouping, max_length));\n    }\n\n    invoke_def.init(character_category_definition);\n\n    return invoke_def;\n};\n\n/**\n * Initializing method\n * @param {Array.<CharacterClass>} character_category_definition Array of CharacterClass\n */\nInvokeDefinitionMap.prototype.init = function (character_category_definition) {\n    if (character_category_definition == null) {\n        return;\n    }\n    for (var i = 0; i < character_category_definition.length; i++) {\n        var character_class = character_category_definition[i];\n        this.map[i] = character_class;\n        this.lookup_table[character_class.class_name] = i;\n    }\n};\n\n/**\n * Get class information by class ID\n * @param {number} class_id\n * @returns {CharacterClass}\n */\nInvokeDefinitionMap.prototype.getCharacterClass = function (class_id) {\n    return this.map[class_id];\n};\n\n/**\n * For building character definition dictionary\n * @param {string} class_name character\n * @returns {number} class_id\n */\nInvokeDefinitionMap.prototype.lookup = function (class_name) {\n    var class_id = this.lookup_table[class_name];\n    if (class_id == null) {\n        return null;\n    }\n    return class_id;\n};\n\n/**\n * Transform from map to binary buffer\n * @returns {Uint8Array}\n */\nInvokeDefinitionMap.prototype.toBuffer = function () {\n    var buffer = new ByteBuffer();\n    for (var i = 0; i < this.map.length; i++) {\n        var char_class = this.map[i];\n        buffer.put(char_class.is_always_invoke);\n        buffer.put(char_class.is_grouping);\n        buffer.putInt(char_class.max_length);\n        buffer.putString(char_class.class_name);\n    }\n    buffer.shrink();\n    return buffer.buffer;\n};\n\nmodule.exports = InvokeDefinitionMap;\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * CharacterClass\n * @param {number} class_id\n * @param {string} class_name\n * @param {boolean} is_always_invoke\n * @param {boolean} is_grouping\n * @param {number} max_length\n * @constructor\n */\nfunction CharacterClass(class_id, class_name, is_always_invoke, is_grouping, max_length) {\n    this.class_id = class_id;\n    this.class_name = class_name;\n    this.is_always_invoke = is_always_invoke;\n    this.is_grouping = is_grouping;\n    this.max_length = max_length;\n}\n\nmodule.exports = CharacterClass;\n","import kuromoji from \"kuromoji\";\n\n// Check where we are\nlet isNode = false;\nconst isBrowser = (typeof window !== \"undefined\");\nif (!isBrowser && typeof module !== \"undefined\" && module.exports) {\n    isNode = true;\n}\n\n/**\n * Kuromoji based morphological analyzer for kuroshiro\n */\nclass Analyzer {\n    /**\n     * Constructor\n     * @param {Object} [options] JSON object which have key-value pairs settings\n     * @param {string} [options.dictPath] Path of the dictionary files\n     */\n    constructor({ dictPath } = {}) {\n        this._analyzer = null;\n\n        if (!dictPath) {\n            if (isNode) this._dictPath = require.resolve(\"kuromoji\").replace(/src(?!.*src).*/, \"dict/\");\n            else this._dictPath = \"node_modules/kuromoji/dict/\";\n        }\n        else {\n            this._dictPath = dictPath;\n        }\n    }\n\n    /**\n     * Initialize the analyzer\n     * @returns {Promise} Promise object represents the result of initialization\n     */\n    init() {\n        return new Promise((resolve, reject) => {\n            const self = this;\n            if (this._analyzer == null) {\n                kuromoji.builder({ dicPath: this._dictPath }).build((err, newAnalyzer) => {\n                    if (err) {\n                        return reject(err);\n                    }\n                    self._analyzer = newAnalyzer;\n                    resolve();\n                });\n            }\n            else {\n                reject(new Error(\"This analyzer has already been initialized.\"));\n            }\n        });\n    }\n\n    /**\n     * Parse the given string\n     * @param {string} str input string\n     * @returns {Promise} Promise object represents the result of parsing\n     * @example The result of parsing\n     * [{\n     *     \"surface_form\": \"黒白\",    // 表層形\n     *     \"pos\": \"名詞\",               // 品詞 (part of speech)\n     *     \"pos_detail_1\": \"一般\",      // 品詞細分類1\n     *     \"pos_detail_2\": \"*\",        // 品詞細分類2\n     *     \"pos_detail_3\": \"*\",        // 品詞細分類3\n     *     \"conjugated_type\": \"*\",     // 活用型\n     *     \"conjugated_form\": \"*\",     // 活用形\n     *     \"basic_form\": \"黒白\",      // 基本形\n     *     \"reading\": \"クロシロ\",       // 読み\n     *     \"pronunciation\": \"クロシロ\",  // 発音\n     *     \"verbose\": {                 // Other properties\n     *         \"word_id\": 413560,\n     *         \"word_type\": \"KNOWN\",\n     *         \"word_position\": 1\n     *     }\n     * }]\n     */\n    parse(str = \"\") {\n        return new Promise((resolve, reject) => {\n            if (str.trim() === \"\") return resolve([]);\n            const result = this._analyzer.tokenize(str);\n            for (let i = 0; i < result.length; i++) {\n                result[i].verbose = {};\n                result[i].verbose.word_id = result[i].word_id;\n                result[i].verbose.word_type = result[i].word_type;\n                result[i].verbose.word_position = result[i].word_position;\n                delete result[i].word_id;\n                delete result[i].word_type;\n                delete result[i].word_position;\n            }\n            resolve(result);\n        });\n    }\n}\n\nexport default Analyzer;\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Tokenizer = require(\"./Tokenizer\");\nvar DictionaryLoader = require(\"./loader/BrowserDictionaryLoader\");\n\n/**\n * TokenizerBuilder create Tokenizer instance.\n * @param {Object} option JSON object which have key-value pairs settings\n * @param {string} option.dicPath Dictionary directory path (or URL using in browser)\n * @constructor\n */\nfunction TokenizerBuilder(option) {\n    if (option.dicPath == null) {\n        this.dic_path = \"dict/\";\n    } else {\n        this.dic_path = option.dicPath;\n    }\n}\n\n/**\n * Build Tokenizer instance by asynchronous manner\n * @param {TokenizerBuilder~onLoad} callback Callback function\n */\nTokenizerBuilder.prototype.build = function (callback) {\n    var loader = new DictionaryLoader(this.dic_path);\n    loader.load(function (err, dic) {\n        callback(err, new Tokenizer(dic));\n    });\n};\n\n/**\n * Callback used by build\n * @callback TokenizerBuilder~onLoad\n * @param {Object} err Error object\n * @param {Tokenizer} tokenizer Prepared Tokenizer\n */\n\nmodule.exports = TokenizerBuilder;\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar ViterbiBuilder = require(\"./viterbi/ViterbiBuilder\");\nvar ViterbiSearcher = require(\"./viterbi/ViterbiSearcher\");\nvar IpadicFormatter = require(\"./util/IpadicFormatter\");\n\nvar PUNCTUATION = /、|。/;\n\n/**\n * Tokenizer\n * @param {DynamicDictionaries} dic Dictionaries used by this tokenizer\n * @constructor\n */\nfunction Tokenizer(dic) {\n    this.token_info_dictionary = dic.token_info_dictionary;\n    this.unknown_dictionary = dic.unknown_dictionary;\n    this.viterbi_builder = new ViterbiBuilder(dic);\n    this.viterbi_searcher = new ViterbiSearcher(dic.connection_costs);\n    this.formatter = new IpadicFormatter();  // TODO Other dictionaries\n}\n\n/**\n * Split into sentence by punctuation\n * @param {string} input Input text\n * @returns {Array.<string>} Sentences end with punctuation\n */\nTokenizer.splitByPunctuation = function (input) {\n    var sentences = [];\n    var tail = input;\n    while (true) {\n        if (tail === \"\") {\n            break;\n        }\n        var index = tail.search(PUNCTUATION);\n        if (index < 0) {\n            sentences.push(tail);\n            break;\n        }\n        sentences.push(tail.substring(0, index + 1));\n        tail = tail.substring(index + 1);\n    }\n    return sentences;\n};\n\n/**\n * Tokenize text\n * @param {string} text Input text to analyze\n * @returns {Array} Tokens\n */\nTokenizer.prototype.tokenize = function (text) {\n    var sentences = Tokenizer.splitByPunctuation(text);\n    var tokens = [];\n    for (var i = 0; i < sentences.length; i++) {\n        var sentence = sentences[i];\n        this.tokenizeForSentence(sentence, tokens);\n    }\n    return tokens;\n};\n\nTokenizer.prototype.tokenizeForSentence = function (sentence, tokens) {\n    if (tokens == null) {\n        tokens = [];\n    }\n    var lattice = this.getLattice(sentence);\n    var best_path = this.viterbi_searcher.search(lattice);\n    var last_pos = 0;\n    if (tokens.length > 0) {\n        last_pos = tokens[tokens.length - 1].word_position;\n    }\n\n    for (var j = 0; j < best_path.length; j++) {\n        var node = best_path[j];\n\n        var token, features, features_line;\n        if (node.type === \"KNOWN\") {\n            features_line = this.token_info_dictionary.getFeatures(node.name);\n            if (features_line == null) {\n                features = [];\n            } else {\n                features = features_line.split(\",\");\n            }\n            token = this.formatter.formatEntry(node.name, last_pos + node.start_pos, node.type, features);\n        } else if (node.type === \"UNKNOWN\") {\n            // Unknown word\n            features_line = this.unknown_dictionary.getFeatures(node.name);\n            if (features_line == null) {\n                features = [];\n            } else {\n                features = features_line.split(\",\");\n            }\n            token = this.formatter.formatUnknownEntry(node.name, last_pos + node.start_pos, node.type, features, node.surface_form);\n        } else {\n            // TODO User dictionary\n            token = this.formatter.formatEntry(node.name, last_pos + node.start_pos, node.type, []);\n        }\n\n        tokens.push(token);\n    }\n\n    return tokens;\n};\n\n/**\n * Build word lattice\n * @param {string} text Input text to analyze\n * @returns {ViterbiLattice} Word lattice\n */\nTokenizer.prototype.getLattice = function (text) {\n    return this.viterbi_builder.build(text);\n};\n\nmodule.exports = Tokenizer;\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar ViterbiNode = require(\"./ViterbiNode\");\nvar ViterbiLattice = require(\"./ViterbiLattice\");\nvar SurrogateAwareString = require(\"../util/SurrogateAwareString\");\n\n/**\n * ViterbiBuilder builds word lattice (ViterbiLattice)\n * @param {DynamicDictionaries} dic dictionary\n * @constructor\n */\nfunction ViterbiBuilder(dic) {\n    this.trie = dic.trie;\n    this.token_info_dictionary = dic.token_info_dictionary;\n    this.unknown_dictionary = dic.unknown_dictionary;\n}\n\n/**\n * Build word lattice\n * @param {string} sentence_str Input text\n * @returns {ViterbiLattice} Word lattice\n */\nViterbiBuilder.prototype.build = function (sentence_str) {\n    var lattice = new ViterbiLattice();\n    var sentence = new SurrogateAwareString(sentence_str);\n\n    var key, trie_id, left_id, right_id, word_cost;\n    for (var pos = 0; pos < sentence.length; pos++) {\n        var tail = sentence.slice(pos);\n        var vocabulary = this.trie.commonPrefixSearch(tail);\n        for (var n = 0; n < vocabulary.length; n++) {  // Words in dictionary do not have surrogate pair (only UCS2 set)\n            trie_id = vocabulary[n].v;\n            key = vocabulary[n].k;\n\n            var token_info_ids = this.token_info_dictionary.target_map[trie_id];\n            for (var i = 0; i < token_info_ids.length; i++) {\n                var token_info_id = parseInt(token_info_ids[i]);\n\n                left_id = this.token_info_dictionary.dictionary.getShort(token_info_id);\n                right_id = this.token_info_dictionary.dictionary.getShort(token_info_id + 2);\n                word_cost = this.token_info_dictionary.dictionary.getShort(token_info_id + 4);\n\n                // node_name, cost, start_index, length, type, left_id, right_id, surface_form\n                lattice.append(new ViterbiNode(token_info_id, word_cost, pos + 1, key.length, \"KNOWN\", left_id, right_id, key));\n            }\n        }\n\n        // Unknown word processing\n        var surrogate_aware_tail = new SurrogateAwareString(tail);\n        var head_char = new SurrogateAwareString(surrogate_aware_tail.charAt(0));\n        var head_char_class = this.unknown_dictionary.lookup(head_char.toString());\n        if (vocabulary == null || vocabulary.length === 0 || head_char_class.is_always_invoke === 1) {\n            // Process unknown word\n            key = head_char;\n            if (head_char_class.is_grouping === 1 && 1 < surrogate_aware_tail.length) {\n                for (var k = 1; k < surrogate_aware_tail.length; k++) {\n                    var next_char = surrogate_aware_tail.charAt(k);\n                    var next_char_class = this.unknown_dictionary.lookup(next_char);\n                    if (head_char_class.class_name !== next_char_class.class_name) {\n                        break;\n                    }\n                    key += next_char;\n                }\n            }\n\n            var unk_ids = this.unknown_dictionary.target_map[head_char_class.class_id];\n            for (var j = 0; j < unk_ids.length; j++) {\n                var unk_id = parseInt(unk_ids[j]);\n\n                left_id = this.unknown_dictionary.dictionary.getShort(unk_id);\n                right_id = this.unknown_dictionary.dictionary.getShort(unk_id + 2);\n                word_cost = this.unknown_dictionary.dictionary.getShort(unk_id + 4);\n\n                // node_name, cost, start_index, length, type, left_id, right_id, surface_form\n                lattice.append(new ViterbiNode(unk_id, word_cost, pos + 1, key.length, \"UNKNOWN\", left_id, right_id, key.toString()));\n            }\n        }\n    }\n    lattice.appendEos();\n\n    return lattice;\n};\n\nmodule.exports = ViterbiBuilder;\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar ViterbiNode = require(\"./ViterbiNode\");\n\n/**\n * ViterbiLattice is a lattice in Viterbi algorithm\n * @constructor\n */\nfunction ViterbiLattice() {\n    this.nodes_end_at = [];\n    this.nodes_end_at[0] = [ new ViterbiNode(-1, 0, 0, 0, \"BOS\", 0, 0, \"\") ];\n    this.eos_pos = 1;\n}\n\n/**\n * Append node to ViterbiLattice\n * @param {ViterbiNode} node\n */\nViterbiLattice.prototype.append = function (node) {\n    var last_pos = node.start_pos + node.length - 1;\n    if (this.eos_pos < last_pos) {\n        this.eos_pos = last_pos;\n    }\n\n    var prev_nodes = this.nodes_end_at[last_pos];\n    if (prev_nodes == null) {\n        prev_nodes = [];\n    }\n    prev_nodes.push(node);\n\n    this.nodes_end_at[last_pos] = prev_nodes;\n};\n\n/**\n * Set ends with EOS (End of Statement)\n */\nViterbiLattice.prototype.appendEos = function () {\n    var last_index = this.nodes_end_at.length;\n    this.eos_pos++;\n    this.nodes_end_at[last_index] = [ new ViterbiNode(-1, 0, this.eos_pos, 0, \"EOS\", 0, 0, \"\") ];\n};\n\nmodule.exports = ViterbiLattice;\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * ViterbiSearcher is for searching best Viterbi path\n * @param {ConnectionCosts} connection_costs Connection costs matrix\n * @constructor\n */\nfunction ViterbiSearcher(connection_costs) {\n    this.connection_costs = connection_costs;\n}\n\n/**\n * Search best path by forward-backward algorithm\n * @param {ViterbiLattice} lattice Viterbi lattice to search\n * @returns {Array} Shortest path\n */\nViterbiSearcher.prototype.search = function (lattice) {\n    lattice = this.forward(lattice);\n    return this.backward(lattice);\n};\n\nViterbiSearcher.prototype.forward = function (lattice) {\n    var i, j, k;\n    for (i = 1; i <= lattice.eos_pos; i++) {\n        var nodes = lattice.nodes_end_at[i];\n        if (nodes == null) {\n            continue;\n        }\n        for (j = 0; j < nodes.length; j++) {\n            var node = nodes[j];\n            var cost = Number.MAX_VALUE;\n            var shortest_prev_node;\n\n            var prev_nodes = lattice.nodes_end_at[node.start_pos - 1];\n            if (prev_nodes == null) {\n                // TODO process unknown words (repair word lattice)\n                continue;\n            }\n            for (k = 0; k < prev_nodes.length; k++) {\n                var prev_node = prev_nodes[k];\n\n                var edge_cost;\n                if (node.left_id == null || prev_node.right_id == null) {\n                    // TODO assert\n                    console.log(\"Left or right is null\");\n                    edge_cost = 0;\n                } else {\n                    edge_cost = this.connection_costs.get(prev_node.right_id, node.left_id);\n                }\n\n                var _cost = prev_node.shortest_cost + edge_cost + node.cost;\n                if (_cost < cost) {\n                    shortest_prev_node = prev_node;\n                    cost = _cost;\n                }\n            }\n\n            node.prev = shortest_prev_node;\n            node.shortest_cost = cost;\n        }\n    }\n    return lattice;\n};\n\nViterbiSearcher.prototype.backward = function (lattice) {\n    var shortest_path = [];\n    var eos = lattice.nodes_end_at[lattice.nodes_end_at.length - 1][0];\n\n    var node_back = eos.prev;\n    if (node_back == null) {\n        return [];\n    }\n    while (node_back.type !== \"BOS\") {\n        shortest_path.push(node_back);\n        if (node_back.prev == null) {\n            // TODO Failed to back. Process unknown words?\n            return [];\n        }\n        node_back = node_back.prev;\n    }\n\n    return shortest_path.reverse();\n};\n\nmodule.exports = ViterbiSearcher;\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Mappings between IPADIC dictionary features and tokenized results\n * @constructor\n */\nfunction IpadicFormatter() {\n}\n\nIpadicFormatter.prototype.formatEntry = function (word_id, position, type, features) {\n    var token = {};\n    token.word_id = word_id;\n    token.word_type = type;\n    token.word_position = position;\n\n    token.surface_form = features[0];\n    token.pos = features[1];\n    token.pos_detail_1 = features[2];\n    token.pos_detail_2 = features[3];\n    token.pos_detail_3 = features[4];\n    token.conjugated_type = features[5];\n    token.conjugated_form = features[6];\n    token.basic_form = features[7];\n    token.reading = features[8];\n    token.pronunciation = features[9];\n\n    return token;\n};\n\nIpadicFormatter.prototype.formatUnknownEntry = function (word_id, position, type, features, surface_form) {\n    var token = {};\n    token.word_id = word_id;\n    token.word_type = type;\n    token.word_position = position;\n\n    token.surface_form = surface_form;\n    token.pos = features[1];\n    token.pos_detail_1 = features[2];\n    token.pos_detail_2 = features[3];\n    token.pos_detail_3 = features[4];\n    token.conjugated_type = features[5];\n    token.conjugated_form = features[6];\n    token.basic_form = features[7];\n    // token.reading = features[8];\n    // token.pronunciation = features[9];\n\n    return token;\n};\n\nmodule.exports = IpadicFormatter;\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar zlib = require(\"zlibjs/bin/gunzip.min.js\");\nvar DictionaryLoader = require(\"./DictionaryLoader\");\n\n/**\n * BrowserDictionaryLoader inherits DictionaryLoader, using jQuery XHR for download\n * @param {string} dic_path Dictionary path\n * @constructor\n */\nfunction BrowserDictionaryLoader(dic_path) {\n    DictionaryLoader.apply(this, [dic_path]);\n}\n\nBrowserDictionaryLoader.prototype = Object.create(DictionaryLoader.prototype);\n\n/**\n * Utility function to load gzipped dictionary\n * @param {string} url Dictionary URL\n * @param {BrowserDictionaryLoader~onLoad} callback Callback function\n */\nBrowserDictionaryLoader.prototype.loadArrayBuffer = function (url, callback) {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url, true);\n    xhr.responseType = \"arraybuffer\";\n    xhr.onload = function () {\n        if (this.status > 0 && this.status !== 200) {\n            callback(xhr.statusText, null);\n            return;\n        }\n        var arraybuffer = this.response;\n        \n        callback(null, arraybuffer);\n    };\n    xhr.onerror = function (err) {\n        callback(err, null);\n    };\n    xhr.send();\n};\n\n/**\n * Callback\n * @callback BrowserDictionaryLoader~onLoad\n * @param {Object} err Error object\n * @param {Uint8Array} buffer Loaded buffer\n */\n\nmodule.exports = BrowserDictionaryLoader;\n","/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */(function() {'use strict';function n(e){throw e;}var p=void 0,aa=this;function t(e,b){var d=e.split(\".\"),c=aa;!(d[0]in c)&&c.execScript&&c.execScript(\"var \"+d[0]);for(var a;d.length&&(a=d.shift());)!d.length&&b!==p?c[a]=b:c=c[a]?c[a]:c[a]={}};var x=\"undefined\"!==typeof Uint8Array&&\"undefined\"!==typeof Uint16Array&&\"undefined\"!==typeof Uint32Array&&\"undefined\"!==typeof DataView;new (x?Uint8Array:Array)(256);var y;for(y=0;256>y;++y)for(var A=y,ba=7,A=A>>>1;A;A>>>=1)--ba;function B(e,b,d){var c,a=\"number\"===typeof b?b:b=0,f=\"number\"===typeof d?d:e.length;c=-1;for(a=f&7;a--;++b)c=c>>>8^C[(c^e[b])&255];for(a=f>>3;a--;b+=8)c=c>>>8^C[(c^e[b])&255],c=c>>>8^C[(c^e[b+1])&255],c=c>>>8^C[(c^e[b+2])&255],c=c>>>8^C[(c^e[b+3])&255],c=c>>>8^C[(c^e[b+4])&255],c=c>>>8^C[(c^e[b+5])&255],c=c>>>8^C[(c^e[b+6])&255],c=c>>>8^C[(c^e[b+7])&255];return(c^4294967295)>>>0}\nvar D=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,\n2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,\n2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,\n2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,\n3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,\n936918E3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117],C=x?new Uint32Array(D):D;function E(){}E.prototype.getName=function(){return this.name};E.prototype.getData=function(){return this.data};E.prototype.G=function(){return this.H};function G(e){var b=e.length,d=0,c=Number.POSITIVE_INFINITY,a,f,k,l,m,r,q,g,h,v;for(g=0;g<b;++g)e[g]>d&&(d=e[g]),e[g]<c&&(c=e[g]);a=1<<d;f=new (x?Uint32Array:Array)(a);k=1;l=0;for(m=2;k<=d;){for(g=0;g<b;++g)if(e[g]===k){r=0;q=l;for(h=0;h<k;++h)r=r<<1|q&1,q>>=1;v=k<<16|g;for(h=r;h<a;h+=m)f[h]=v;++l}++k;l<<=1;m<<=1}return[f,d,c]};var J=[],K;for(K=0;288>K;K++)switch(!0){case 143>=K:J.push([K+48,8]);break;case 255>=K:J.push([K-144+400,9]);break;case 279>=K:J.push([K-256+0,7]);break;case 287>=K:J.push([K-280+192,8]);break;default:n(\"invalid literal: \"+K)}\nvar ca=function(){function e(a){switch(!0){case 3===a:return[257,a-3,0];case 4===a:return[258,a-4,0];case 5===a:return[259,a-5,0];case 6===a:return[260,a-6,0];case 7===a:return[261,a-7,0];case 8===a:return[262,a-8,0];case 9===a:return[263,a-9,0];case 10===a:return[264,a-10,0];case 12>=a:return[265,a-11,1];case 14>=a:return[266,a-13,1];case 16>=a:return[267,a-15,1];case 18>=a:return[268,a-17,1];case 22>=a:return[269,a-19,2];case 26>=a:return[270,a-23,2];case 30>=a:return[271,a-27,2];case 34>=a:return[272,\na-31,2];case 42>=a:return[273,a-35,3];case 50>=a:return[274,a-43,3];case 58>=a:return[275,a-51,3];case 66>=a:return[276,a-59,3];case 82>=a:return[277,a-67,4];case 98>=a:return[278,a-83,4];case 114>=a:return[279,a-99,4];case 130>=a:return[280,a-115,4];case 162>=a:return[281,a-131,5];case 194>=a:return[282,a-163,5];case 226>=a:return[283,a-195,5];case 257>=a:return[284,a-227,5];case 258===a:return[285,a-258,0];default:n(\"invalid length: \"+a)}}var b=[],d,c;for(d=3;258>=d;d++)c=e(d),b[d]=c[2]<<24|c[1]<<\n16|c[0];return b}();x&&new Uint32Array(ca);function L(e,b){this.i=[];this.j=32768;this.d=this.f=this.c=this.n=0;this.input=x?new Uint8Array(e):e;this.o=!1;this.k=M;this.w=!1;if(b||!(b={}))b.index&&(this.c=b.index),b.bufferSize&&(this.j=b.bufferSize),b.bufferType&&(this.k=b.bufferType),b.resize&&(this.w=b.resize);switch(this.k){case N:this.a=32768;this.b=new (x?Uint8Array:Array)(32768+this.j+258);break;case M:this.a=0;this.b=new (x?Uint8Array:Array)(this.j);this.e=this.D;this.q=this.A;this.l=this.C;break;default:n(Error(\"invalid inflate mode\"))}}\nvar N=0,M=1;\nL.prototype.g=function(){for(;!this.o;){var e=P(this,3);e&1&&(this.o=!0);e>>>=1;switch(e){case 0:var b=this.input,d=this.c,c=this.b,a=this.a,f=b.length,k=p,l=p,m=c.length,r=p;this.d=this.f=0;d+1>=f&&n(Error(\"invalid uncompressed block header: LEN\"));k=b[d++]|b[d++]<<8;d+1>=f&&n(Error(\"invalid uncompressed block header: NLEN\"));l=b[d++]|b[d++]<<8;k===~l&&n(Error(\"invalid uncompressed block header: length verify\"));d+k>b.length&&n(Error(\"input buffer is broken\"));switch(this.k){case N:for(;a+k>c.length;){r=\nm-a;k-=r;if(x)c.set(b.subarray(d,d+r),a),a+=r,d+=r;else for(;r--;)c[a++]=b[d++];this.a=a;c=this.e();a=this.a}break;case M:for(;a+k>c.length;)c=this.e({t:2});break;default:n(Error(\"invalid inflate mode\"))}if(x)c.set(b.subarray(d,d+k),a),a+=k,d+=k;else for(;k--;)c[a++]=b[d++];this.c=d;this.a=a;this.b=c;break;case 1:this.l(da,ea);break;case 2:for(var q=P(this,5)+257,g=P(this,5)+1,h=P(this,4)+4,v=new (x?Uint8Array:Array)(Q.length),s=p,F=p,H=p,w=p,z=p,O=p,I=p,u=p,Z=p,u=0;u<h;++u)v[Q[u]]=P(this,3);if(!x){u=\nh;for(h=v.length;u<h;++u)v[Q[u]]=0}s=G(v);w=new (x?Uint8Array:Array)(q+g);u=0;for(Z=q+g;u<Z;)switch(z=R(this,s),z){case 16:for(I=3+P(this,2);I--;)w[u++]=O;break;case 17:for(I=3+P(this,3);I--;)w[u++]=0;O=0;break;case 18:for(I=11+P(this,7);I--;)w[u++]=0;O=0;break;default:O=w[u++]=z}F=x?G(w.subarray(0,q)):G(w.slice(0,q));H=x?G(w.subarray(q)):G(w.slice(q));this.l(F,H);break;default:n(Error(\"unknown BTYPE: \"+e))}}return this.q()};\nvar S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],Q=x?new Uint16Array(S):S,fa=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],ga=x?new Uint16Array(fa):fa,ha=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],T=x?new Uint8Array(ha):ha,ia=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],ja=x?new Uint16Array(ia):ia,ka=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,\n11,12,12,13,13],U=x?new Uint8Array(ka):ka,V=new (x?Uint8Array:Array)(288),W,la;W=0;for(la=V.length;W<la;++W)V[W]=143>=W?8:255>=W?9:279>=W?7:8;var da=G(V),X=new (x?Uint8Array:Array)(30),Y,ma;Y=0;for(ma=X.length;Y<ma;++Y)X[Y]=5;var ea=G(X);function P(e,b){for(var d=e.f,c=e.d,a=e.input,f=e.c,k=a.length,l;c<b;)f>=k&&n(Error(\"input buffer is broken\")),d|=a[f++]<<c,c+=8;l=d&(1<<b)-1;e.f=d>>>b;e.d=c-b;e.c=f;return l}\nfunction R(e,b){for(var d=e.f,c=e.d,a=e.input,f=e.c,k=a.length,l=b[0],m=b[1],r,q;c<m&&!(f>=k);)d|=a[f++]<<c,c+=8;r=l[d&(1<<m)-1];q=r>>>16;q>c&&n(Error(\"invalid code length: \"+q));e.f=d>>q;e.d=c-q;e.c=f;return r&65535}\nL.prototype.l=function(e,b){var d=this.b,c=this.a;this.r=e;for(var a=d.length-258,f,k,l,m;256!==(f=R(this,e));)if(256>f)c>=a&&(this.a=c,d=this.e(),c=this.a),d[c++]=f;else{k=f-257;m=ga[k];0<T[k]&&(m+=P(this,T[k]));f=R(this,b);l=ja[f];0<U[f]&&(l+=P(this,U[f]));c>=a&&(this.a=c,d=this.e(),c=this.a);for(;m--;)d[c]=d[c++-l]}for(;8<=this.d;)this.d-=8,this.c--;this.a=c};\nL.prototype.C=function(e,b){var d=this.b,c=this.a;this.r=e;for(var a=d.length,f,k,l,m;256!==(f=R(this,e));)if(256>f)c>=a&&(d=this.e(),a=d.length),d[c++]=f;else{k=f-257;m=ga[k];0<T[k]&&(m+=P(this,T[k]));f=R(this,b);l=ja[f];0<U[f]&&(l+=P(this,U[f]));c+m>a&&(d=this.e(),a=d.length);for(;m--;)d[c]=d[c++-l]}for(;8<=this.d;)this.d-=8,this.c--;this.a=c};\nL.prototype.e=function(){var e=new (x?Uint8Array:Array)(this.a-32768),b=this.a-32768,d,c,a=this.b;if(x)e.set(a.subarray(32768,e.length));else{d=0;for(c=e.length;d<c;++d)e[d]=a[d+32768]}this.i.push(e);this.n+=e.length;if(x)a.set(a.subarray(b,b+32768));else for(d=0;32768>d;++d)a[d]=a[b+d];this.a=32768;return a};\nL.prototype.D=function(e){var b,d=this.input.length/this.c+1|0,c,a,f,k=this.input,l=this.b;e&&(\"number\"===typeof e.t&&(d=e.t),\"number\"===typeof e.z&&(d+=e.z));2>d?(c=(k.length-this.c)/this.r[2],f=258*(c/2)|0,a=f<l.length?l.length+f:l.length<<1):a=l.length*d;x?(b=new Uint8Array(a),b.set(l)):b=l;return this.b=b};\nL.prototype.q=function(){var e=0,b=this.b,d=this.i,c,a=new (x?Uint8Array:Array)(this.n+(this.a-32768)),f,k,l,m;if(0===d.length)return x?this.b.subarray(32768,this.a):this.b.slice(32768,this.a);f=0;for(k=d.length;f<k;++f){c=d[f];l=0;for(m=c.length;l<m;++l)a[e++]=c[l]}f=32768;for(k=this.a;f<k;++f)a[e++]=b[f];this.i=[];return this.buffer=a};\nL.prototype.A=function(){var e,b=this.a;x?this.w?(e=new Uint8Array(b),e.set(this.b.subarray(0,b))):e=this.b.subarray(0,b):(this.b.length>b&&(this.b.length=b),e=this.b);return this.buffer=e};function $(e){this.input=e;this.c=0;this.m=[];this.s=!1}$.prototype.F=function(){this.s||this.g();return this.m.slice()};\n$.prototype.g=function(){for(var e=this.input.length;this.c<e;){var b=new E,d=p,c=p,a=p,f=p,k=p,l=p,m=p,r=p,q=p,g=this.input,h=this.c;b.u=g[h++];b.v=g[h++];(31!==b.u||139!==b.v)&&n(Error(\"invalid file signature:\"+b.u+\",\"+b.v));b.p=g[h++];switch(b.p){case 8:break;default:n(Error(\"unknown compression method: \"+b.p))}b.h=g[h++];r=g[h++]|g[h++]<<8|g[h++]<<16|g[h++]<<24;b.H=new Date(1E3*r);b.N=g[h++];b.M=g[h++];0<(b.h&4)&&(b.I=g[h++]|g[h++]<<8,h+=b.I);if(0<(b.h&8)){m=[];for(l=0;0<(k=g[h++]);)m[l++]=String.fromCharCode(k);\nb.name=m.join(\"\")}if(0<(b.h&16)){m=[];for(l=0;0<(k=g[h++]);)m[l++]=String.fromCharCode(k);b.J=m.join(\"\")}0<(b.h&2)&&(b.B=B(g,0,h)&65535,b.B!==(g[h++]|g[h++]<<8)&&n(Error(\"invalid header crc16\")));d=g[g.length-4]|g[g.length-3]<<8|g[g.length-2]<<16|g[g.length-1]<<24;g.length-h-4-4<512*d&&(f=d);c=new L(g,{index:h,bufferSize:f});b.data=a=c.g();h=c.c;b.K=q=(g[h++]|g[h++]<<8|g[h++]<<16|g[h++]<<24)>>>0;B(a,p,p)!==q&&n(Error(\"invalid CRC-32 checksum: 0x\"+B(a,p,p).toString(16)+\" / 0x\"+q.toString(16)));b.L=\nd=(g[h++]|g[h++]<<8|g[h++]<<16|g[h++]<<24)>>>0;(a.length&4294967295)!==d&&n(Error(\"invalid input size: \"+(a.length&4294967295)+\" / \"+d));this.m.push(b);this.c=h}this.s=!0;var v=this.m,s,F,H=0,w=0,z;s=0;for(F=v.length;s<F;++s)w+=v[s].data.length;if(x){z=new Uint8Array(w);for(s=0;s<F;++s)z.set(v[s].data,H),H+=v[s].data.length}else{z=[];for(s=0;s<F;++s)z[s]=v[s].data;z=Array.prototype.concat.apply([],z)}return z};t(\"Zlib.Gunzip\",$);t(\"Zlib.Gunzip.prototype.decompress\",$.prototype.g);t(\"Zlib.Gunzip.prototype.getMembers\",$.prototype.F);t(\"Zlib.GunzipMember\",E);t(\"Zlib.GunzipMember.prototype.getName\",E.prototype.getName);t(\"Zlib.GunzipMember.prototype.getData\",E.prototype.getData);t(\"Zlib.GunzipMember.prototype.getMtime\",E.prototype.G);}).call(this);\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar async = require(\"async\");\nvar DynamicDictionaries = require(\"../dict/DynamicDictionaries\");\nvar urljoin = require('url-join');\n\n/**\n * DictionaryLoader base constructor\n * @param {string} dic_path Dictionary path\n * @constructor\n */\nfunction DictionaryLoader(dic_path) {\n    this.dic = new DynamicDictionaries();\n    this.dic_path = dic_path;\n}\n\nDictionaryLoader.prototype.loadArrayBuffer = function (file, callback) {\n    throw new Error(\"DictionaryLoader#loadArrayBuffer should be overwrite\");\n};\n\n/**\n * Load dictionary files\n * @param {DictionaryLoader~onLoad} load_callback Callback function called after loaded\n */\nDictionaryLoader.prototype.load = function (load_callback) {\n    var dic = this.dic;\n    var dic_path = this.dic_path;\n    var loadArrayBuffer = this.loadArrayBuffer;\n\n    async.parallel([\n        // Trie\n        function (callback) {\n            async.map([ \"base.dat\", \"check.dat\" ], function (filename, _callback) {\n                loadArrayBuffer(urljoin(dic_path, filename), function (err, buffer) {\n                    if(err) {\n                        return _callback(err);\n                    }\n                    _callback(null, buffer);\n                });\n            }, function (err, buffers) {\n                if(err) {\n                    return callback(err);\n                }\n                var base_buffer = new Int32Array(buffers[0]);\n                var check_buffer = new Int32Array(buffers[1]);\n\n                dic.loadTrie(base_buffer, check_buffer);\n                callback(null);\n            });\n        },\n        // Token info dictionaries\n        function (callback) {\n            async.map([ \"tid.dat\", \"tid_pos.dat\", \"tid_map.dat\" ], function (filename, _callback) {\n                loadArrayBuffer(urljoin(dic_path, filename), function (err, buffer) {\n                    if(err) {\n                        return _callback(err);\n                    }\n                    _callback(null, buffer);\n                });\n            }, function (err, buffers) {\n                if(err) {\n                    return callback(err);\n                }\n                var token_info_buffer = new Uint8Array(buffers[0]);\n                var pos_buffer = new Uint8Array(buffers[1]);\n                var target_map_buffer = new Uint8Array(buffers[2]);\n\n                dic.loadTokenInfoDictionaries(token_info_buffer, pos_buffer, target_map_buffer);\n                callback(null);\n            });\n        },\n        // Connection cost matrix\n        function (callback) {\n            loadArrayBuffer(urljoin(dic_path, \"cc.dat\"), function (err, buffer) {\n                if(err) {\n                    return callback(err);\n                }\n                var cc_buffer = new Int16Array(buffer);\n                dic.loadConnectionCosts(cc_buffer);\n                callback(null);\n            });\n        },\n        // Unknown dictionaries\n        function (callback) {\n            async.map([ \"unk.dat\", \"unk_pos.dat\", \"unk_map.dat\", \"unk_char.dat\", \"unk_compat.dat\", \"unk_invoke.dat\" ], function (filename, _callback) {\n                loadArrayBuffer(urljoin(dic_path, filename), function (err, buffer) {\n                    if(err) {\n                        return _callback(err);\n                    }\n                    _callback(null, buffer);\n                });\n            }, function (err, buffers) {\n                if(err) {\n                    return callback(err);\n                }\n                var unk_buffer = new Uint8Array(buffers[0]);\n                var unk_pos_buffer = new Uint8Array(buffers[1]);\n                var unk_map_buffer = new Uint8Array(buffers[2]);\n                var cat_map_buffer = new Uint8Array(buffers[3]);\n                var compat_cat_map_buffer = new Uint32Array(buffers[4]);\n                var invoke_def_buffer = new Uint8Array(buffers[5]);\n\n                dic.loadUnknownDictionaries(unk_buffer, unk_pos_buffer, unk_map_buffer, cat_map_buffer, compat_cat_map_buffer, invoke_def_buffer);\n                // dic.loadUnknownDictionaries(char_buffer, unk_buffer);\n                callback(null);\n            });\n        }\n    ], function (err) {\n        load_callback(err, dic);\n    });\n};\n\n/**\n * Callback\n * @callback DictionaryLoader~onLoad\n * @param {Object} err Error object\n * @param {DynamicDictionaries} dic Loaded dictionary\n */\n\nmodule.exports = DictionaryLoader;\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.async = global.async || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction slice(arrayLike, start) {\n    start = start|0;\n    var newLen = Math.max(arrayLike.length - start, 0);\n    var newArr = Array(newLen);\n    for(var idx = 0; idx < newLen; idx++)  {\n        newArr[idx] = arrayLike[start + idx];\n    }\n    return newArr;\n}\n\n/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nvar apply = function(fn/*, ...args*/) {\n    var args = slice(arguments, 1);\n    return function(/*callArgs*/) {\n        var callArgs = slice(arguments);\n        return fn.apply(null, args.concat(callArgs));\n    };\n};\n\nvar initialParams = function (fn) {\n    return function (/*...args, callback*/) {\n        var args = slice(arguments);\n        var callback = args.pop();\n        fn.call(this, args, callback);\n    };\n};\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return function (fn/*, ...args*/) {\n        var args = slice(arguments, 1);\n        defer(function () {\n            fn.apply(null, args);\n        });\n    };\n}\n\nvar _defer;\n\nif (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (isObject(result) && typeof result.then === 'function') {\n            result.then(function(value) {\n                invokeCallback(callback, null, value);\n            }, function(err) {\n                invokeCallback(callback, err.message ? err : new Error(err));\n            });\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (e) {\n        setImmediate$1(rethrow, e);\n    }\n}\n\nfunction rethrow(error) {\n    throw error;\n}\n\nvar supportsSymbol = typeof Symbol === 'function';\n\nfunction isAsync(fn) {\n    return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction wrapAsync(asyncFn) {\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\nfunction applyEach$1(eachfn) {\n    return function(fns/*, ...args*/) {\n        var args = slice(arguments, 1);\n        var go = initialParams(function(args, callback) {\n            var that = this;\n            return eachfn(fns, function (fn, cb) {\n                wrapAsync(fn).apply(that, args.concat(cb));\n            }, callback);\n        });\n        if (args.length) {\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n}\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Built-in value references. */\nvar Symbol$1 = root.Symbol;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag$1),\n      tag = value[symToStringTag$1];\n\n  try {\n    value[symToStringTag$1] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag$1] = tag;\n    } else {\n      delete value[symToStringTag$1];\n    }\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar objectProto$1 = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString$1 = objectProto$1.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString$1.call(value);\n}\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]';\nvar undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]';\nvar funcTag = '[object Function]';\nvar genTag = '[object GeneratorFunction]';\nvar proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nvar breakLoop = {};\n\n/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nfunction once(fn) {\n    return function () {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, arguments);\n    };\n}\n\nvar iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;\n\nvar getIterator = function (coll) {\n    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();\n};\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/** Used for built-in method references. */\nvar objectProto$3 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$2 = objectProto$3.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto$3.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER$1 = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER$1 : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/** `Object#toString` result references. */\nvar argsTag$1 = '[object Arguments]';\nvar arrayTag = '[object Array]';\nvar boolTag = '[object Boolean]';\nvar dateTag = '[object Date]';\nvar errorTag = '[object Error]';\nvar funcTag$1 = '[object Function]';\nvar mapTag = '[object Map]';\nvar numberTag = '[object Number]';\nvar objectTag = '[object Object]';\nvar regexpTag = '[object RegExp]';\nvar setTag = '[object Set]';\nvar stringTag = '[object String]';\nvar weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]';\nvar dataViewTag = '[object DataView]';\nvar float32Tag = '[object Float32Array]';\nvar float64Tag = '[object Float64Array]';\nvar int8Tag = '[object Int8Array]';\nvar int16Tag = '[object Int16Array]';\nvar int32Tag = '[object Int32Array]';\nvar uint8Tag = '[object Uint8Array]';\nvar uint8ClampedTag = '[object Uint8ClampedArray]';\nvar uint16Tag = '[object Uint16Array]';\nvar uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag$1] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/** Detect free variable `exports`. */\nvar freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports$1 && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/** Used for built-in method references. */\nvar objectProto$2 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$1 = objectProto$2.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty$1.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar objectProto$5 = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;\n\n  return value === proto;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\n/** Used for built-in method references. */\nvar objectProto$4 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$3 = objectProto$4.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty$3.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = keys(obj);\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        return i < len ? {value: obj[key], key: key} : null;\n    };\n}\n\nfunction iterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function() {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, arguments);\n    };\n}\n\nfunction _eachOfLimit(limit) {\n    return function (obj, iteratee, callback) {\n        callback = once(callback || noop);\n        if (limit <= 0 || !obj) {\n            return callback(null);\n        }\n        var nextElem = iterator(obj);\n        var done = false;\n        var running = 0;\n        var looping = false;\n\n        function iterateeCallback(err, value) {\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            }\n            else if (value === breakLoop || (done && running <= 0)) {\n                done = true;\n                return callback(null);\n            }\n            else if (!looping) {\n                replenish();\n            }\n        }\n\n        function replenish () {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n            looping = false;\n        }\n\n        replenish();\n    };\n}\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n */\nfunction eachOfLimit(coll, limit, iteratee, callback) {\n    _eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n}\n\nfunction doLimit(fn, limit) {\n    return function (iterable, iteratee, callback) {\n        return fn(iterable, limit, iteratee, callback);\n    };\n}\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback || noop);\n    var index = 0,\n        completed = 0,\n        length = coll.length;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err) {\n            callback(err);\n        } else if ((++completed === length) || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nvar eachOfGeneric = doLimit(eachOfLimit, Infinity);\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @example\n *\n * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\n * var configs = {};\n *\n * async.forEachOf(obj, function (value, key, callback) {\n *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\n *         if (err) return callback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }, function (err) {\n *     if (err) console.error(err.message);\n *     // configs is now a map of JSON data\n *     doSomethingWith(configs);\n * });\n */\nvar eachOf = function(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    eachOfImplementation(coll, wrapAsync(iteratee), callback);\n};\n\nfunction doParallel(fn) {\n    return function (obj, iteratee, callback) {\n        return fn(eachOf, obj, wrapAsync(iteratee), callback);\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    callback = callback || noop;\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n\n    eachfn(arr, function (value, _, callback) {\n        var index = counter++;\n        _iteratee(value, function (err, v) {\n            results[index] = v;\n            callback(err);\n        });\n    }, function (err) {\n        callback(err, results);\n    });\n}\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callback\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @example\n *\n * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\n *     // results is now an array of stats for each file\n * });\n */\nvar map = doParallel(_asyncMap);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {Function} - If only the first argument, `fns`, is provided, it will\n * return a function which lets you pass in the arguments as if it were a single\n * function call. The signature is `(..args, callback)`. If invoked with any\n * arguments, `callback` is required.\n * @example\n *\n * async.applyEach([enableSearch, updateSchema], 'bucket', callback);\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async.applyEach([enableSearch, updateSchema]),\n *     callback\n * );\n */\nvar applyEach = applyEach$1(map);\n\nfunction doParallelLimit(fn) {\n    return function (obj, limit, iteratee, callback) {\n        return fn(_eachOfLimit(limit), obj, wrapAsync(iteratee), callback);\n    };\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n */\nvar mapLimit = doParallelLimit(_asyncMap);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n */\nvar mapSeries = doLimit(mapLimit, 1);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {Function} - If only the first argument is provided, it will return\n * a function which lets you pass in the arguments as if it were a single\n * function call.\n */\nvar applyEachSeries = applyEach$1(mapSeries);\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\n/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value\n    ? strictIndexOf(array, value, fromIndex)\n    : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\n/**\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * {@link AsyncFunction}s also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns undefined\n * @example\n *\n * async.auto({\n *     // this function will just be passed a callback\n *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\n *     showData: ['readData', function(results, cb) {\n *         // results.readData is the file's contents\n *         // ...\n *     }]\n * }, callback);\n *\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         console.log('in write_file', JSON.stringify(results));\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         console.log('in email_link', JSON.stringify(results));\n *         // once the file is written let's email a link to it...\n *         // results.write_file contains the filename returned by write_file.\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('results = ', results);\n * });\n */\nvar auto = function (tasks, concurrency, callback) {\n    if (typeof concurrency === 'function') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || noop);\n    var keys$$1 = keys(tasks);\n    var numTasks = keys$$1.length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    baseForOwn(tasks, function (task, key) {\n        if (!isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        arrayEach(dependencies, function (dependencyName) {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key +\n                    '` has a non-existent dependency `' +\n                    dependencyName + '` in ' +\n                    dependencies.join(', '));\n            }\n            addListener(dependencyName, function () {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(function () {\n            runTask(key, task);\n        });\n    }\n\n    function processQueue() {\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while(readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        arrayEach(taskListeners, function (fn) {\n            fn();\n        });\n        processQueue();\n    }\n\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce(function(err, result) {\n            runningTasks--;\n            if (arguments.length > 2) {\n                result = slice(arguments, 1);\n            }\n            if (err) {\n                var safeResults = {};\n                baseForOwn(results, function(val, rkey) {\n                    safeResults[rkey] = val;\n                });\n                safeResults[key] = result;\n                hasError = true;\n                listeners = Object.create(null);\n\n                callback(err, safeResults);\n            } else {\n                results[key] = result;\n                taskComplete(key);\n            }\n        });\n\n        runningTasks++;\n        var taskFn = wrapAsync(task[task.length - 1]);\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            arrayEach(getDependents(currentTask), function (dependent) {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error(\n                'async.auto cannot execute tasks due to a recursive dependency'\n            );\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        baseForOwn(tasks, function (task, key) {\n            if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n};\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;\nvar symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the last unmatched string symbol.\n */\nfunction charsEndIndex(strSymbols, chrSymbols) {\n  var index = strSymbols.length;\n\n  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\n/**\n * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the first unmatched string symbol.\n */\nfunction charsStartIndex(strSymbols, chrSymbols) {\n  var index = -1,\n      length = strSymbols.length;\n\n  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\n/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff';\nvar rsComboMarksRange = '\\\\u0300-\\\\u036f';\nvar reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f';\nvar rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff';\nvar rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;\nvar rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange$1 = '\\\\ud800-\\\\udfff';\nvar rsComboMarksRange$1 = '\\\\u0300-\\\\u036f';\nvar reComboHalfMarksRange$1 = '\\\\ufe20-\\\\ufe2f';\nvar rsComboSymbolsRange$1 = '\\\\u20d0-\\\\u20ff';\nvar rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;\nvar rsVarRange$1 = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange$1 + ']';\nvar rsCombo = '[' + rsComboRange$1 + ']';\nvar rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]';\nvar rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';\nvar rsNonAstral = '[^' + rsAstralRange$1 + ']';\nvar rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}';\nvar rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]';\nvar rsZWJ$1 = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?';\nvar rsOptVar = '[' + rsVarRange$1 + ']?';\nvar rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';\nvar rsSeq = rsOptVar + reOptMod + rsOptJoin;\nvar rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrim, '');\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      chrSymbols = stringToArray(chars),\n      start = charsStartIndex(strSymbols, chrSymbols),\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n  return castSlice(strSymbols, start, end).join('');\n}\n\nvar FN_ARGS = /^(?:async\\s+)?(function)?\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\nfunction parseParams(func) {\n    func = func.toString().replace(STRIP_COMMENTS, '');\n    func = func.match(FN_ARGS)[2].replace(' ', '');\n    func = func ? func.split(FN_ARG_SPLIT) : [];\n    func = func.map(function (arg){\n        return trim(arg.replace(FN_ARG, ''));\n    });\n    return func;\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    baseForOwn(tasks, function (taskFn, key) {\n        var params;\n        var fnIsAsync = isAsync(taskFn);\n        var hasNoDeps =\n            (!fnIsAsync && taskFn.length === 1) ||\n            (fnIsAsync && taskFn.length === 0);\n\n        if (isArray(taskFn)) {\n            params = taskFn.slice(0, -1);\n            taskFn = taskFn[taskFn.length - 1];\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (hasNoDeps) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            // remove callback param\n            if (!fnIsAsync) params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = arrayMap(params, function (name) {\n                return results[name];\n            });\n            newArgs.push(taskCb);\n            wrapAsync(taskFn).apply(null, newArgs);\n        }\n    });\n\n    auto(newTasks, callback);\n}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nfunction DLL() {\n    this.head = this.tail = null;\n    this.length = 0;\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nDLL.prototype.removeLink = function(node) {\n    if (node.prev) node.prev.next = node.next;\n    else this.head = node.next;\n    if (node.next) node.next.prev = node.prev;\n    else this.tail = node.prev;\n\n    node.prev = node.next = null;\n    this.length -= 1;\n    return node;\n};\n\nDLL.prototype.empty = function () {\n    while(this.head) this.shift();\n    return this;\n};\n\nDLL.prototype.insertAfter = function(node, newNode) {\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next) node.next.prev = newNode;\n    else this.tail = newNode;\n    node.next = newNode;\n    this.length += 1;\n};\n\nDLL.prototype.insertBefore = function(node, newNode) {\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev) node.prev.next = newNode;\n    else this.head = newNode;\n    node.prev = newNode;\n    this.length += 1;\n};\n\nDLL.prototype.unshift = function(node) {\n    if (this.head) this.insertBefore(this.head, node);\n    else setInitial(this, node);\n};\n\nDLL.prototype.push = function(node) {\n    if (this.tail) this.insertAfter(this.tail, node);\n    else setInitial(this, node);\n};\n\nDLL.prototype.shift = function() {\n    return this.head && this.removeLink(this.head);\n};\n\nDLL.prototype.pop = function() {\n    return this.tail && this.removeLink(this.tail);\n};\n\nDLL.prototype.toArray = function () {\n    var arr = Array(this.length);\n    var curr = this.head;\n    for(var idx = 0; idx < this.length; idx++) {\n        arr[idx] = curr.data;\n        curr = curr.next;\n    }\n    return arr;\n};\n\nDLL.prototype.remove = function (testFn) {\n    var curr = this.head;\n    while(!!curr) {\n        var next = curr.next;\n        if (testFn(curr)) {\n            this.removeLink(curr);\n        }\n        curr = next;\n    }\n    return this;\n};\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new Error('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(function() {\n                q.drain();\n            });\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                callback: callback || noop\n            };\n\n            if (insertAtFront) {\n                q._tasks.unshift(item);\n            } else {\n                q._tasks.push(item);\n            }\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(function() {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n    }\n\n    function _next(tasks) {\n        return function(err){\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = baseIndexOf(workersList, task, 0);\n                if (index === 0) {\n                    workersList.shift();\n                } else if (index > 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback.apply(task, arguments);\n\n                if (err != null) {\n                    q.error(err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                q.unsaturated();\n            }\n\n            if (q.idle()) {\n                q.drain();\n            }\n            q.process();\n        };\n    }\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        concurrency: concurrency,\n        payload: payload,\n        saturated: noop,\n        unsaturated:noop,\n        buffer: concurrency / 4,\n        empty: noop,\n        drain: noop,\n        error: noop,\n        started: false,\n        paused: false,\n        push: function (data, callback) {\n            _insert(data, false, callback);\n        },\n        kill: function () {\n            q.drain = noop;\n            q._tasks.empty();\n        },\n        unshift: function (data, callback) {\n            _insert(data, true, callback);\n        },\n        remove: function (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process: function () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    q.empty();\n                }\n\n                if (numRunning === q.concurrency) {\n                    q.saturated();\n                }\n\n                var cb = onlyOnce(_next(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length: function () {\n            return q._tasks.length;\n        },\n        running: function () {\n            return numRunning;\n        },\n        workersList: function () {\n            return workersList;\n        },\n        idle: function() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause: function () {\n            q.paused = true;\n        },\n        resume: function () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    return q;\n}\n\n/**\n * A cargo of tasks for the worker function to complete. Cargo inherits all of\n * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.\n * @typedef {Object} CargoObject\n * @memberOf module:ControlFlow\n * @property {Function} length - A function returning the number of items\n * waiting to be processed. Invoke like `cargo.length()`.\n * @property {number} payload - An `integer` for determining how many tasks\n * should be process per round. This property can be changed after a `cargo` is\n * created to alter the payload on-the-fly.\n * @property {Function} push - Adds `task` to the `queue`. The callback is\n * called once the `worker` has finished processing the task. Instead of a\n * single task, an array of `tasks` can be submitted. The respective callback is\n * used for every task in the list. Invoke like `cargo.push(task, [callback])`.\n * @property {Function} saturated - A callback that is called when the\n * `queue.length()` hits the concurrency and further tasks will be queued.\n * @property {Function} empty - A callback that is called when the last item\n * from the `queue` is given to a `worker`.\n * @property {Function} drain - A callback that is called when the last item\n * from the `queue` has returned from the `worker`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke like `cargo.idle()`.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke like `cargo.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke like `cargo.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.\n */\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargo.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n */\nfunction cargo(worker, payload) {\n    return queue(worker, 1, payload);\n}\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n */\nvar eachOfSeries = doLimit(eachOfLimit, 1);\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @example\n *\n * async.reduce([1,2,3], 0, function(memo, item, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         callback(null, memo + item)\n *     });\n * }, function(err, result) {\n *     // result is now equal to the last value of memo, which is 6\n * });\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback || noop);\n    var _iteratee = wrapAsync(iteratee);\n    eachOfSeries(coll, function(x, i, callback) {\n        _iteratee(memo, x, function(err, v) {\n            memo = v;\n            callback(err);\n        });\n    }, function(err) {\n        callback(err, memo);\n    });\n}\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nfunction seq(/*...functions*/) {\n    var _functions = arrayMap(arguments, wrapAsync);\n    return function(/*...args*/) {\n        var args = slice(arguments);\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = noop;\n        }\n\n        reduce(_functions, args, function(newargs, fn, cb) {\n            fn.apply(that, newargs.concat(function(err/*, ...nextargs*/) {\n                var nextargs = slice(arguments, 1);\n                cb(err, nextargs);\n            }));\n        },\n        function(err, results) {\n            cb.apply(that, [err].concat(results));\n        });\n    };\n}\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nvar compose = function(/*...args*/) {\n    return seq.apply(null, slice(arguments).reverse());\n};\n\nvar _concat = Array.prototype.concat;\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n */\nvar concatLimit = function(coll, limit, iteratee, callback) {\n    callback = callback || noop;\n    var _iteratee = wrapAsync(iteratee);\n    mapLimit(coll, limit, function(val, callback) {\n        _iteratee(val, function(err /*, ...args*/) {\n            if (err) return callback(err);\n            return callback(null, slice(arguments, 1));\n        });\n    }, function(err, mapResults) {\n        var result = [];\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                result = _concat.apply(result, mapResults[i]);\n            }\n        }\n\n        return callback(err, result);\n    });\n};\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. There is no guarantee that the\n * results array will be returned in the original order of `coll` passed to the\n * `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback(err)] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @example\n *\n * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\n *     // files is now a list of filenames that exist in the 3 directories\n * });\n */\nvar concat = doLimit(concatLimit, Infinity);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n * The iteratee should complete with an array an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback(err)] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n */\nvar concatSeries = doLimit(concatLimit, 1);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nvar constant = function(/*...values*/) {\n    var values = slice(arguments);\n    var args = [null].concat(values);\n    return function (/*...ignoredArgs, callback*/) {\n        var callback = arguments[arguments.length - 1];\n        return callback.apply(this, args);\n    };\n};\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nfunction _createTester(check, getResult) {\n    return function(eachfn, arr, iteratee, cb) {\n        cb = cb || noop;\n        var testPassed = false;\n        var testResult;\n        eachfn(arr, function(value, _, callback) {\n            iteratee(value, function(err, result) {\n                if (err) {\n                    callback(err);\n                } else if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    callback(null, breakLoop);\n                } else {\n                    callback();\n                }\n            });\n        }, function(err) {\n            if (err) {\n                cb(err);\n            } else {\n                cb(null, testPassed ? testResult : getResult(false));\n            }\n        });\n    };\n}\n\nfunction _findGetResult(v, x) {\n    return x;\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @example\n *\n * async.detect(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // result now equals the first file in the list that exists\n * });\n */\nvar detect = doParallel(_createTester(identity, _findGetResult));\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n */\nvar detectLimit = doParallelLimit(_createTester(identity, _findGetResult));\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n */\nvar detectSeries = doLimit(detectLimit, 1);\n\nfunction consoleFunc(name) {\n    return function (fn/*, ...args*/) {\n        var args = slice(arguments, 1);\n        args.push(function (err/*, ...args*/) {\n            var args = slice(arguments, 1);\n            if (typeof console === 'object') {\n                if (err) {\n                    if (console.error) {\n                        console.error(err);\n                    }\n                } else if (console[name]) {\n                    arrayEach(args, function (x) {\n                        console[name](x);\n                    });\n                }\n            }\n        });\n        wrapAsync(fn).apply(null, args);\n    };\n}\n\n/**\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\n * `console` using `console.dir` to display the properties of the resulting object.\n * Only works in Node.js or in browsers that support `console.dir` and\n * `console.error` (such as FF and Chrome).\n * If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in\n * the order of operations, the arguments `test` and `fn` are switched.\n *\n * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.\n * @name doDuring\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.during]{@link module:ControlFlow.during}\n * @category Control Flow\n * @param {AsyncFunction} fn - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `fn`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `fn`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error if one occurred, otherwise `null`.\n */\nfunction doDuring(fn, test, callback) {\n    callback = onlyOnce(callback || noop);\n    var _fn = wrapAsync(fn);\n    var _test = wrapAsync(test);\n\n    function next(err/*, ...args*/) {\n        if (err) return callback(err);\n        var args = slice(arguments, 1);\n        args.push(check);\n        _test.apply(this, args);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (!truth) return callback(null);\n        _fn(next);\n    }\n\n    check(null, true);\n\n}\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {Function} test - synchronous truth test to perform after each\n * execution of `iteratee`. Invoked with any non-error callback results of\n * `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback || noop);\n    var _iteratee = wrapAsync(iteratee);\n    var next = function(err/*, ...args*/) {\n        if (err) return callback(err);\n        var args = slice(arguments, 1);\n        if (test.apply(this, args)) return _iteratee(next);\n        callback.apply(null, [null].concat(args));\n    };\n    _iteratee(next);\n}\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} test - synchronous truth test to perform after each\n * execution of `iteratee`. Invoked with any non-error callback results of\n * `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n */\nfunction doUntil(iteratee, test, callback) {\n    doWhilst(iteratee, function() {\n        return !test.apply(this, arguments);\n    }, callback);\n}\n\n/**\n * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that\n * is passed a callback in the form of `function (err, truth)`. If error is\n * passed to `test` or `fn`, the main callback is immediately called with the\n * value of the error.\n *\n * @name during\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `fn`. Invoked with (callback).\n * @param {AsyncFunction} fn - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error, if one occurred, otherwise `null`.\n * @example\n *\n * var count = 0;\n *\n * async.during(\n *     function (callback) {\n *         return callback(null, count < 5);\n *     },\n *     function (callback) {\n *         count++;\n *         setTimeout(callback, 1000);\n *     },\n *     function (err) {\n *         // 5 seconds have passed\n *     }\n * );\n */\nfunction during(test, fn, callback) {\n    callback = onlyOnce(callback || noop);\n    var _fn = wrapAsync(fn);\n    var _test = wrapAsync(test);\n\n    function next(err) {\n        if (err) return callback(err);\n        _test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (!truth) return callback(null);\n        _fn(next);\n    }\n\n    _test(check);\n}\n\nfunction _withoutIndex(iteratee) {\n    return function (value, index, callback) {\n        return iteratee(value, callback);\n    };\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @example\n *\n * // assuming openFiles is an array of file names and saveFile is a function\n * // to save the modified contents of that file:\n *\n * async.each(openFiles, saveFile, function(err){\n *   // if any of the saves produced an error, err would equal that error\n * });\n *\n * // assuming openFiles is an array of file names\n * async.each(openFiles, function(file, callback) {\n *\n *     // Perform operation on file here.\n *     console.log('Processing file ' + file);\n *\n *     if( file.length > 32 ) {\n *       console.log('This file name is too long');\n *       callback('File name too long');\n *     } else {\n *       // Do work to process file here\n *       console.log('File processed');\n *       callback();\n *     }\n * }, function(err) {\n *     // if any of the file processing produced an error, err would equal that error\n *     if( err ) {\n *       // One of the iterations produced an error.\n *       // All processing will now stop.\n *       console.log('A file failed to process');\n *     } else {\n *       console.log('All files have been processed successfully');\n *     }\n * });\n */\nfunction eachLimit(coll, iteratee, callback) {\n    eachOf(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfLimit`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n    _eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfSeries`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n */\nvar eachSeries = doLimit(eachLimit$1, 1);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return initialParams(function (args, callback) {\n        var sync = true;\n        args.push(function () {\n            var innerArgs = arguments;\n            if (sync) {\n                setImmediate$1(function () {\n                    callback.apply(null, innerArgs);\n                });\n            } else {\n                callback.apply(null, innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    });\n}\n\nfunction notId(v) {\n    return !v;\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @example\n *\n * async.every(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then every file exists\n * });\n */\nvar every = doParallel(_createTester(notId, notId));\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n */\nvar everyLimit = doParallelLimit(_createTester(notId, notId));\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in series.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n */\nvar everySeries = doLimit(everyLimit, 1);\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, function (x, index, callback) {\n        iteratee(x, function (err, v) {\n            truthValues[index] = !!v;\n            callback(err);\n        });\n    }, function (err) {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, function (x, index, callback) {\n        iteratee(x, function (err, v) {\n            if (err) {\n                callback(err);\n            } else {\n                if (v) {\n                    results.push({index: index, value: x});\n                }\n                callback();\n            }\n        });\n    }, function (err) {\n        if (err) {\n            callback(err);\n        } else {\n            callback(null, arrayMap(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), baseProperty('value')));\n        }\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    filter(eachfn, coll, wrapAsync(iteratee), callback || noop);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @example\n *\n * async.filter(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of the existing files\n * });\n */\nvar filter = doParallel(_filter);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n */\nvar filterLimit = doParallelLimit(_filter);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n */\nvar filterSeries = doLimit(filterLimit, 1);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback || noop);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n        if (err) return done(err);\n        task(next);\n    }\n    next();\n}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n */\nvar groupByLimit = function(coll, limit, iteratee, callback) {\n    callback = callback || noop;\n    var _iteratee = wrapAsync(iteratee);\n    mapLimit(coll, limit, function(val, callback) {\n        _iteratee(val, function(err, key) {\n            if (err) return callback(err);\n            return callback(null, {key: key, val: val});\n        });\n    }, function(err, mapResults) {\n        var result = {};\n        // from MDN, handle object having an `hasOwnProperty` prop\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                var key = mapResults[i].key;\n                var val = mapResults[i].val;\n\n                if (hasOwnProperty.call(result, key)) {\n                    result[key].push(val);\n                } else {\n                    result[key] = [val];\n                }\n            }\n        }\n\n        return callback(err, result);\n    });\n};\n\n/**\n * Returns a new object, where each value corresponds to an array of items, from\n * `coll`, that returned the corresponding key. That is, the keys of the object\n * correspond to the values passed to the `iteratee` callback.\n *\n * Note: Since this function applies the `iteratee` to each item in parallel,\n * there is no guarantee that the `iteratee` functions will complete in order.\n * However, the values for each key in the `result` will be in the same order as\n * the original `coll`. For Objects, the values will roughly be in the order of\n * the original Objects' keys (but this can vary across JavaScript engines).\n *\n * @name groupBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @example\n *\n * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {\n *     db.findById(userId, function(err, user) {\n *         if (err) return callback(err);\n *         return callback(null, user.age);\n *     });\n * }, function(err, result) {\n *     // result is object containing the userIds grouped by age\n *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};\n * });\n */\nvar groupBy = doLimit(groupByLimit, Infinity);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n */\nvar groupBySeries = doLimit(groupByLimit, 1);\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback || noop);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    eachOfLimit(obj, limit, function(val, key, next) {\n        _iteratee(val, key, function (err, result) {\n            if (err) return next(err);\n            newObj[key] = result;\n            next();\n        });\n    }, function (err) {\n        callback(err, newObj);\n    });\n}\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @example\n *\n * async.mapValues({\n *     f1: 'file1',\n *     f2: 'file2',\n *     f3: 'file3'\n * }, function (file, key, callback) {\n *   fs.stat(file, callback);\n * }, function(err, result) {\n *     // result is now a map of stats for each file, e.g.\n *     // {\n *     //     f1: [stats for file1],\n *     //     f2: [stats for file2],\n *     //     f3: [stats for file3]\n *     // }\n * });\n */\n\nvar mapValues = doLimit(mapValuesLimit, Infinity);\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n */\nvar mapValuesSeries = doLimit(mapValuesLimit, 1);\n\nfunction has(obj, key) {\n    return key in obj;\n}\n\n/**\n * Caches the results of an async function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {AsyncFunction} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    hasher = hasher || identity;\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams(function memoized(args, callback) {\n        var key = hasher.apply(null, args);\n        if (has(memo, key)) {\n            setImmediate$1(function() {\n                callback.apply(null, memo[key]);\n            });\n        } else if (has(queues, key)) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            _fn.apply(null, args.concat(function(/*args*/) {\n                var args = slice(arguments);\n                memo[key] = args;\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i].apply(null, args);\n                }\n            }));\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nfunction _parallel(eachfn, tasks, callback) {\n    callback = callback || noop;\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, function (task, key, callback) {\n        wrapAsync(task)(function (err, result) {\n            if (arguments.length > 2) {\n                result = slice(arguments, 1);\n            }\n            results[key] = result;\n            callback(err);\n        });\n    }, function (err) {\n        callback(err, results);\n    });\n}\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n *\n * @example\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // the results array will equal ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equals to: {one: 1, two: 2}\n * });\n */\nfunction parallelLimit(tasks, callback) {\n    _parallel(eachOf, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n */\nfunction parallelLimit$1(tasks, limit, callback) {\n    _parallel(_eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Object} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {Function} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {Function} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a callback that is called when the number of\n * running workers hits the `concurrency` limit, and further tasks will be\n * queued.\n * @property {Function} unsaturated - a callback that is called when the number\n * of running workers is less than the `concurrency` & `buffer` limits, and\n * further tasks will not be queued.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a callback that is called when the last item\n * from the `queue` is given to a `worker`.\n * @property {Function} drain - a callback that is called when the last item\n * from the `queue` has returned from the `worker`.\n * @property {Function} error - a callback that is called when a task errors.\n * Has the signature `function(error, task)`.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain = function() {\n *     console.log('all items have been processed');\n * };\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * q.push({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nvar queue$1 = function (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue(function (items, cb) {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n};\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */\nvar priorityQueue = function(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n\n    // Override push to accept second parameter representing priority\n    q.push = function(data, priority, callback) {\n        if (callback == null) callback = noop;\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(function() {\n                q.drain();\n            });\n        }\n\n        priority = priority || 0;\n        var nextNode = q._tasks.head;\n        while (nextNode && priority >= nextNode.priority) {\n            nextNode = nextNode.next;\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                priority: priority,\n                callback: callback\n            };\n\n            if (nextNode) {\n                q._tasks.insertBefore(nextNode, item);\n            } else {\n                q._tasks.push(item);\n            }\n        }\n        setImmediate$1(q.process);\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n};\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback || noop);\n    if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        wrapAsync(tasks[i])(callback);\n    }\n}\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n */\nfunction reduceRight (array, memo, iteratee, callback) {\n    var reversed = slice(array).reverse();\n    reduce(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the async function in another function that always completes with a\n * result object, even when it errors.\n *\n * The result object has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push(function callback(error, cbArg) {\n            if (error) {\n                reflectCallback(null, { error: error });\n            } else {\n                var value;\n                if (arguments.length <= 2) {\n                    value = cbArg;\n                } else {\n                    value = slice(arguments, 1);\n                }\n                reflectCallback(null, { value: value });\n            }\n        });\n\n        return _fn.apply(this, args);\n    });\n}\n\n/**\n * A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (isArray(tasks)) {\n        results = arrayMap(tasks, reflect);\n    } else {\n        results = {};\n        baseForOwn(tasks, function(task, key) {\n            results[key] = reflect.call(this, task);\n        });\n    }\n    return results;\n}\n\nfunction reject$1(eachfn, arr, iteratee, callback) {\n    _filter(eachfn, arr, function(value, cb) {\n        iteratee(value, function(err, v) {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @example\n *\n * async.reject(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of missing files\n *     createFiles(results);\n * });\n */\nvar reject = doParallel(reject$1);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n */\nvar rejectLimit = doParallelLimit(reject$1);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n */\nvar rejectSeries = doLimit(rejectLimit, 1);\n\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant$1(value) {\n  return function() {\n    return value;\n  };\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {AsyncFunction} task - An async function to retry.\n * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nfunction retry(opts, task, callback) {\n    var DEFAULT_TIMES = 5;\n    var DEFAULT_INTERVAL = 0;\n\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    function parseTimes(acc, t) {\n        if (typeof t === 'object') {\n            acc.times = +t.times || DEFAULT_TIMES;\n\n            acc.intervalFunc = typeof t.interval === 'function' ?\n                t.interval :\n                constant$1(+t.interval || DEFAULT_INTERVAL);\n\n            acc.errorFilter = t.errorFilter;\n        } else if (typeof t === 'number' || typeof t === 'string') {\n            acc.times = +t || DEFAULT_TIMES;\n        } else {\n            throw new Error(\"Invalid arguments for async.retry\");\n        }\n    }\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || noop;\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || noop;\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n    function retryAttempt() {\n        _task(function(err) {\n            if (err && attempt++ < options.times &&\n                (typeof options.errorFilter != 'function' ||\n                    options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt));\n            } else {\n                callback.apply(null, arguments);\n            }\n        });\n    }\n\n    retryAttempt();\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nvar retryable = function (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    var _task = wrapAsync(task);\n    return initialParams(function (args, callback) {\n        function taskFn(cb) {\n            _task.apply(null, args.concat(cb));\n        }\n\n        if (opts) retry(opts, taskFn, callback);\n        else retry(taskFn, callback);\n\n    });\n};\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @example\n * async.series([\n *     function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     },\n *     function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // results is now equal to ['one', 'two']\n * });\n *\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback){\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equal to: {one: 1, two: 2}\n * });\n */\nfunction series(tasks, callback) {\n    _parallel(eachOfSeries, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @example\n *\n * async.some(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then at least one of the files exists\n * });\n */\nvar some = doParallel(_createTester(Boolean, identity));\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n */\nvar someLimit = doParallelLimit(_createTester(Boolean, identity));\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in series.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n */\nvar someSeries = doLimit(someLimit, 1);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @example\n *\n * async.sortBy(['file1','file2','file3'], function(file, callback) {\n *     fs.stat(file, function(err, stats) {\n *         callback(err, stats.mtime);\n *     });\n * }, function(err, results) {\n *     // results is now the original array of files sorted by\n *     // modified date\n * });\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x);\n * }, function(err,result) {\n *     // result callback\n * });\n *\n * // descending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\n * }, function(err,result) {\n *     // result callback\n * });\n */\nfunction sortBy (coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    map(coll, function (x, callback) {\n        _iteratee(x, function (err, criteria) {\n            if (err) return callback(err);\n            callback(null, {value: x, criteria: criteria});\n        });\n    }, function (err, results) {\n        if (err) return callback(err);\n        callback(null, arrayMap(results.sort(comparator), baseProperty('value')));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria, b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n\n    return initialParams(function (args, callback) {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push(function () {\n            if (!timedOut) {\n                callback.apply(null, arguments);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn.apply(null, args);\n    });\n}\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil;\nvar nativeMax = Math.max;\n\n/**\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.\n */\nfunction baseRange(start, end, step, fromRight) {\n  var index = -1,\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n\n  while (length--) {\n    result[fromRight ? length : ++index] = start;\n    start += step;\n  }\n  return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n */\nfunction timeLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    mapLimit(baseRange(0, count, 1), limit, _iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nvar times = doLimit(timeLimit, Infinity);\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n */\nvar timesSeries = doLimit(timeLimit, 1);\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in series, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @example\n *\n * async.transform([1,2,3], function(acc, item, index, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         acc.push(item * 2)\n *         callback(null)\n *     });\n * }, function(err, result) {\n *     // result is now equal to [2, 4, 6]\n * });\n *\n * @example\n *\n * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\n *     setImmediate(function () {\n *         obj[key] = val * 2;\n *         callback();\n *     })\n * }, function (err, result) {\n *     // result is equal to {a: 2, b: 4, c: 6}\n * })\n */\nfunction transform (coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3) {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = isArray(coll) ? [] : {};\n    }\n    callback = once(callback || noop);\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf(coll, function(v, k, cb) {\n        _iteratee(accumulator, v, k, cb);\n    }, function(err) {\n        callback(err, accumulator);\n    });\n}\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    callback = callback || noop;\n    eachSeries(tasks, function(task, callback) {\n        wrapAsync(task)(function (err, res/*, ...args*/) {\n            if (arguments.length > 2) {\n                result = slice(arguments, 1);\n            } else {\n                result = res;\n            }\n            error = err;\n            callback(!err);\n        });\n    }, function () {\n        callback(error, result);\n    });\n}\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {AsyncFunction} fn - the memoized function\n * @returns {AsyncFunction} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Function} test - synchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns undefined\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function() { return count < 5; },\n *     function(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback || noop);\n    var _iteratee = wrapAsync(iteratee);\n    if (!test()) return callback(null);\n    var next = function(err/*, ...args*/) {\n        if (err) return callback(err);\n        if (test()) return _iteratee(next);\n        var args = slice(arguments, 1);\n        callback.apply(null, [null].concat(args));\n    };\n    _iteratee(next);\n}\n\n/**\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {Function} test - synchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n */\nfunction until(test, iteratee, callback) {\n    whilst(function() {\n        return !test.apply(this, arguments);\n    }, iteratee, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nvar waterfall = function(tasks, callback) {\n    callback = once(callback || noop);\n    if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        var task = wrapAsync(tasks[taskIndex++]);\n        args.push(onlyOnce(next));\n        task.apply(null, args);\n    }\n\n    function next(err/*, ...args*/) {\n        if (err || taskIndex === tasks.length) {\n            return callback.apply(null, arguments);\n        }\n        nextTask(slice(arguments, 1));\n    }\n\n    nextTask([]);\n};\n\n/**\n * An \"async function\" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a \"Node-style async function\",\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static\n */\n\n/**\n * Async is a utility module which provides straight-forward, powerful functions\n * for working with asynchronous JavaScript. Although originally designed for\n * use with [Node.js](http://nodejs.org) and installable via\n * `npm install --save async`, it can also be used directly in the browser.\n * @module async\n * @see AsyncFunction\n */\n\n\n/**\n * A collection of `async` functions for manipulating collections, such as\n * arrays and objects.\n * @module Collections\n */\n\n/**\n * A collection of `async` functions for controlling the flow through a script.\n * @module ControlFlow\n */\n\n/**\n * A collection of `async` utility functions.\n * @module Utils\n */\n\nvar index = {\n    apply: apply,\n    applyEach: applyEach,\n    applyEachSeries: applyEachSeries,\n    asyncify: asyncify,\n    auto: auto,\n    autoInject: autoInject,\n    cargo: cargo,\n    compose: compose,\n    concat: concat,\n    concatLimit: concatLimit,\n    concatSeries: concatSeries,\n    constant: constant,\n    detect: detect,\n    detectLimit: detectLimit,\n    detectSeries: detectSeries,\n    dir: dir,\n    doDuring: doDuring,\n    doUntil: doUntil,\n    doWhilst: doWhilst,\n    during: during,\n    each: eachLimit,\n    eachLimit: eachLimit$1,\n    eachOf: eachOf,\n    eachOfLimit: eachOfLimit,\n    eachOfSeries: eachOfSeries,\n    eachSeries: eachSeries,\n    ensureAsync: ensureAsync,\n    every: every,\n    everyLimit: everyLimit,\n    everySeries: everySeries,\n    filter: filter,\n    filterLimit: filterLimit,\n    filterSeries: filterSeries,\n    forever: forever,\n    groupBy: groupBy,\n    groupByLimit: groupByLimit,\n    groupBySeries: groupBySeries,\n    log: log,\n    map: map,\n    mapLimit: mapLimit,\n    mapSeries: mapSeries,\n    mapValues: mapValues,\n    mapValuesLimit: mapValuesLimit,\n    mapValuesSeries: mapValuesSeries,\n    memoize: memoize,\n    nextTick: nextTick,\n    parallel: parallelLimit,\n    parallelLimit: parallelLimit$1,\n    priorityQueue: priorityQueue,\n    queue: queue$1,\n    race: race,\n    reduce: reduce,\n    reduceRight: reduceRight,\n    reflect: reflect,\n    reflectAll: reflectAll,\n    reject: reject,\n    rejectLimit: rejectLimit,\n    rejectSeries: rejectSeries,\n    retry: retry,\n    retryable: retryable,\n    seq: seq,\n    series: series,\n    setImmediate: setImmediate$1,\n    some: some,\n    someLimit: someLimit,\n    someSeries: someSeries,\n    sortBy: sortBy,\n    timeout: timeout,\n    times: times,\n    timesLimit: timeLimit,\n    timesSeries: timesSeries,\n    transform: transform,\n    tryEach: tryEach,\n    unmemoize: unmemoize,\n    until: until,\n    waterfall: waterfall,\n    whilst: whilst,\n\n    // aliases\n    all: every,\n    allLimit: everyLimit,\n    allSeries: everySeries,\n    any: some,\n    anyLimit: someLimit,\n    anySeries: someSeries,\n    find: detect,\n    findLimit: detectLimit,\n    findSeries: detectSeries,\n    forEach: eachLimit,\n    forEachSeries: eachSeries,\n    forEachLimit: eachLimit$1,\n    forEachOf: eachOf,\n    forEachOfSeries: eachOfSeries,\n    forEachOfLimit: eachOfLimit,\n    inject: reduce,\n    foldl: reduce,\n    foldr: reduceRight,\n    select: filter,\n    selectLimit: filterLimit,\n    selectSeries: filterSeries,\n    wrapSync: asyncify\n};\n\nexports['default'] = index;\nexports.apply = apply;\nexports.applyEach = applyEach;\nexports.applyEachSeries = applyEachSeries;\nexports.asyncify = asyncify;\nexports.auto = auto;\nexports.autoInject = autoInject;\nexports.cargo = cargo;\nexports.compose = compose;\nexports.concat = concat;\nexports.concatLimit = concatLimit;\nexports.concatSeries = concatSeries;\nexports.constant = constant;\nexports.detect = detect;\nexports.detectLimit = detectLimit;\nexports.detectSeries = detectSeries;\nexports.dir = dir;\nexports.doDuring = doDuring;\nexports.doUntil = doUntil;\nexports.doWhilst = doWhilst;\nexports.during = during;\nexports.each = eachLimit;\nexports.eachLimit = eachLimit$1;\nexports.eachOf = eachOf;\nexports.eachOfLimit = eachOfLimit;\nexports.eachOfSeries = eachOfSeries;\nexports.eachSeries = eachSeries;\nexports.ensureAsync = ensureAsync;\nexports.every = every;\nexports.everyLimit = everyLimit;\nexports.everySeries = everySeries;\nexports.filter = filter;\nexports.filterLimit = filterLimit;\nexports.filterSeries = filterSeries;\nexports.forever = forever;\nexports.groupBy = groupBy;\nexports.groupByLimit = groupByLimit;\nexports.groupBySeries = groupBySeries;\nexports.log = log;\nexports.map = map;\nexports.mapLimit = mapLimit;\nexports.mapSeries = mapSeries;\nexports.mapValues = mapValues;\nexports.mapValuesLimit = mapValuesLimit;\nexports.mapValuesSeries = mapValuesSeries;\nexports.memoize = memoize;\nexports.nextTick = nextTick;\nexports.parallel = parallelLimit;\nexports.parallelLimit = parallelLimit$1;\nexports.priorityQueue = priorityQueue;\nexports.queue = queue$1;\nexports.race = race;\nexports.reduce = reduce;\nexports.reduceRight = reduceRight;\nexports.reflect = reflect;\nexports.reflectAll = reflectAll;\nexports.reject = reject;\nexports.rejectLimit = rejectLimit;\nexports.rejectSeries = rejectSeries;\nexports.retry = retry;\nexports.retryable = retryable;\nexports.seq = seq;\nexports.series = series;\nexports.setImmediate = setImmediate$1;\nexports.some = some;\nexports.someLimit = someLimit;\nexports.someSeries = someSeries;\nexports.sortBy = sortBy;\nexports.timeout = timeout;\nexports.times = times;\nexports.timesLimit = timeLimit;\nexports.timesSeries = timesSeries;\nexports.transform = transform;\nexports.tryEach = tryEach;\nexports.unmemoize = unmemoize;\nexports.until = until;\nexports.waterfall = waterfall;\nexports.whilst = whilst;\nexports.all = every;\nexports.allLimit = everyLimit;\nexports.allSeries = everySeries;\nexports.any = some;\nexports.anyLimit = someLimit;\nexports.anySeries = someSeries;\nexports.find = detect;\nexports.findLimit = detectLimit;\nexports.findSeries = detectSeries;\nexports.forEach = eachLimit;\nexports.forEachSeries = eachSeries;\nexports.forEachLimit = eachLimit$1;\nexports.forEachOf = eachOf;\nexports.forEachOfSeries = eachOfSeries;\nexports.forEachOfLimit = eachOfLimit;\nexports.inject = reduce;\nexports.foldl = reduce;\nexports.foldr = reduceRight;\nexports.select = filter;\nexports.selectLimit = filterLimit;\nexports.selectSeries = filterSeries;\nexports.wrapSync = asyncify;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();\n  else if (typeof define === 'function' && define.amd) define(definition);\n  else context[name] = definition();\n})('urljoin', this, function () {\n\n  function normalize (strArray) {\n    var resultArray = [];\n\n    // If the first part is a plain protocol, we combine it with the next part.\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    }\n\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') { continue; }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n\n    }\n\n    var str = resultArray.join('/');\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n    // remove trailing slash before parameters or hash\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');\n\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n\n});\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar doublearray = require(\"doublearray\");\nvar DynamicDictionaries = require(\"../DynamicDictionaries\");\nvar TokenInfoDictionary = require(\"../TokenInfoDictionary\");\nvar ConnectionCostsBuilder = require(\"./ConnectionCostsBuilder\");\nvar CharacterDefinitionBuilder = require(\"./CharacterDefinitionBuilder\");\nvar UnknownDictionary = require(\"../UnknownDictionary\");\n\n/**\n * Build dictionaries (token info, connection costs)\n *\n * Generates from matrix.def\n * cc.dat: Connection costs\n *\n * Generates from *.csv\n * dat.dat: Double array\n * tid.dat: Token info dictionary\n * tid_map.dat: targetMap\n * tid_pos.dat: posList (part of speech)\n */\nfunction DictionaryBuilder() {\n    // Array of entries, each entry in Mecab form\n    // (0: surface form, 1: left id, 2: right id, 3: word cost, 4: part of speech id, 5-: other features)\n    this.tid_entries = [];\n    this.unk_entries = [];\n    this.cc_builder = new ConnectionCostsBuilder();\n    this.cd_builder = new CharacterDefinitionBuilder();\n}\n\nDictionaryBuilder.prototype.addTokenInfoDictionary = function (line) {\n    var new_entry = line.split(\",\");\n    this.tid_entries.push(new_entry);\n    return this;\n};\n\n/**\n * Put one line of \"matrix.def\" file for building ConnectionCosts object\n * @param {string} line is a line of \"matrix.def\"\n */\nDictionaryBuilder.prototype.putCostMatrixLine = function (line) {\n    this.cc_builder.putLine(line);\n    return this;\n};\n\nDictionaryBuilder.prototype.putCharDefLine = function (line) {\n    this.cd_builder.putLine(line);\n    return this;\n};\n\n/**\n * Put one line of \"unk.def\" file for building UnknownDictionary object\n * @param {string} line is a line of \"unk.def\"\n */\nDictionaryBuilder.prototype.putUnkDefLine = function (line) {\n    this.unk_entries.push(line.split(\",\"));\n    return this;\n};\n\nDictionaryBuilder.prototype.build = function () {\n    var dictionaries = this.buildTokenInfoDictionary();\n    var unknown_dictionary = this.buildUnknownDictionary();\n\n    return new DynamicDictionaries(dictionaries.trie, dictionaries.token_info_dictionary, this.cc_builder.build(), unknown_dictionary);\n};\n\n/**\n * Build TokenInfoDictionary\n *\n * @returns {{trie: *, token_info_dictionary: *}}\n */\nDictionaryBuilder.prototype.buildTokenInfoDictionary = function () {\n\n    var token_info_dictionary = new TokenInfoDictionary();\n\n    // using as hashmap, string -> string (word_id -> surface_form) to build dictionary\n    var dictionary_entries = token_info_dictionary.buildDictionary(this.tid_entries);\n\n    var trie = this.buildDoubleArray();\n\n    for (var token_info_id in dictionary_entries) {\n        var surface_form = dictionary_entries[token_info_id];\n        var trie_id = trie.lookup(surface_form);\n\n        // Assertion\n        // if (trie_id < 0) {\n        //     console.log(\"Not Found:\" + surface_form);\n        // }\n\n        token_info_dictionary.addMapping(trie_id, token_info_id);\n    }\n\n    return {\n        trie: trie,\n        token_info_dictionary: token_info_dictionary\n    };\n};\n\nDictionaryBuilder.prototype.buildUnknownDictionary = function () {\n\n    var unk_dictionary = new UnknownDictionary();\n\n    // using as hashmap, string -> string (word_id -> surface_form) to build dictionary\n    var dictionary_entries = unk_dictionary.buildDictionary(this.unk_entries);\n\n    var char_def = this.cd_builder.build(); // Create CharacterDefinition\n\n    unk_dictionary.characterDefinition(char_def);\n\n    for (var token_info_id in dictionary_entries) {\n        var class_name = dictionary_entries[token_info_id];\n        var class_id = char_def.invoke_definition_map.lookup(class_name);\n\n        // Assertion\n        // if (trie_id < 0) {\n        //     console.log(\"Not Found:\" + surface_form);\n        // }\n\n        unk_dictionary.addMapping(class_id, token_info_id);\n    }\n\n    return unk_dictionary;\n};\n\n/**\n * Build double array trie\n *\n * @returns {DoubleArray} Double-Array trie\n */\nDictionaryBuilder.prototype.buildDoubleArray = function () {\n    var trie_id = 0;\n    var words = this.tid_entries.map(function (entry) {\n        var surface_form = entry[0];\n        return { k: surface_form, v: trie_id++ };\n    });\n\n    var builder = doublearray.builder(1024 * 1024);\n    return builder.build(words);\n};\n\nmodule.exports = DictionaryBuilder;\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar ConnectionCosts = require(\"../ConnectionCosts\");\n\n/**\n * Builder class for constructing ConnectionCosts object\n * @constructor\n */\nfunction ConnectionCostsBuilder() {\n    this.lines = 0;\n    this.connection_cost = null;\n}\n\nConnectionCostsBuilder.prototype.putLine = function (line) {\n    if (this.lines === 0) {\n        var dimensions = line.split(\" \");\n        var forward_dimension = dimensions[0];\n        var backward_dimension = dimensions[1];\n\n        if (forward_dimension < 0 || backward_dimension < 0) {\n            throw \"Parse error of matrix.def\";\n        }\n\n        this.connection_cost = new ConnectionCosts(forward_dimension, backward_dimension);\n        this.lines++;\n        return this;\n    }\n\n    var costs = line.split(\" \");\n\n    if (costs.length !== 3) {\n        return this;\n    }\n\n    var forward_id = parseInt(costs[0]);\n    var backward_id = parseInt(costs[1]);\n    var cost = parseInt(costs[2]);\n\n    if (forward_id < 0 || backward_id < 0 || !isFinite(forward_id) || !isFinite(backward_id) ||\n        this.connection_cost.forward_dimension <= forward_id || this.connection_cost.backward_dimension <= backward_id) {\n        throw \"Parse error of matrix.def\";\n    }\n\n    this.connection_cost.put(forward_id, backward_id, cost);\n    this.lines++;\n    return this;\n};\n\nConnectionCostsBuilder.prototype.build = function () {\n    return this.connection_cost;\n};\n\nmodule.exports = ConnectionCostsBuilder;\n","/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar CharacterDefinition = require(\"../CharacterDefinition\");\nvar InvokeDefinitionMap = require(\"../InvokeDefinitionMap\");\n\nvar CATEGORY_DEF_PATTERN = /^(\\w+)\\s+(\\d)\\s+(\\d)\\s+(\\d)/;\nvar CATEGORY_MAPPING_PATTERN = /^(0x[0-9A-F]{4})(?:\\s+([^#\\s]+))(?:\\s+([^#\\s]+))*/;\nvar RANGE_CATEGORY_MAPPING_PATTERN = /^(0x[0-9A-F]{4})\\.\\.(0x[0-9A-F]{4})(?:\\s+([^#\\s]+))(?:\\s+([^#\\s]+))*/;\n\n/**\n * CharacterDefinitionBuilder\n * @constructor\n */\nfunction CharacterDefinitionBuilder() {\n    this.char_def = new CharacterDefinition();\n    this.char_def.invoke_definition_map = new InvokeDefinitionMap();\n    this.character_category_definition = [];\n    this.category_mapping = [];\n}\n\nCharacterDefinitionBuilder.prototype.putLine = function (line) {\n    var parsed_category_def = CATEGORY_DEF_PATTERN.exec(line);\n    if (parsed_category_def != null) {\n        var class_id = this.character_category_definition.length;\n        var char_class = CharacterDefinition.parseCharCategory(class_id, parsed_category_def);\n        if (char_class == null) {\n            return;\n        }\n        this.character_category_definition.push(char_class);\n        return;\n    }\n    var parsed_category_mapping = CATEGORY_MAPPING_PATTERN.exec(line);\n    if (parsed_category_mapping != null) {\n        var mapping = CharacterDefinition.parseCategoryMapping(parsed_category_mapping);\n        this.category_mapping.push(mapping);\n    }\n    var parsed_range_category_mapping = RANGE_CATEGORY_MAPPING_PATTERN.exec(line);\n    if (parsed_range_category_mapping != null) {\n        var range_mapping = CharacterDefinition.parseRangeCategoryMapping(parsed_range_category_mapping);\n        this.category_mapping.push(range_mapping);\n    }\n};\n\nCharacterDefinitionBuilder.prototype.build = function () {\n    // TODO If DEFAULT category does not exist, throw error\n    this.char_def.invoke_definition_map.init(this.character_category_definition);\n    this.char_def.initCategoryMappings(this.category_mapping);\n    return this.char_def;\n};\n\nmodule.exports = CharacterDefinitionBuilder;\n","const KATAKANA_HIRAGANA_SHIFT = \"\\u3041\".charCodeAt(0) - \"\\u30a1\".charCodeAt(0);\nconst HIRAGANA_KATAKANA_SHIFT = \"\\u30a1\".charCodeAt(0) - \"\\u3041\".charCodeAt(0);\nconst ROMANIZATION_SYSTEM = {\n    NIPPON: \"nippon\",\n    PASSPORT: \"passport\",\n    HEPBURN: \"hepburn\"\n};\n\n/**\n * Check if given char is a hiragana\n *\n * @param {string} ch Given char\n * @return {boolean} if given char is a hiragana\n */\nconst isHiragana = function (ch) {\n    ch = ch[0];\n    return ch >= \"\\u3040\" && ch <= \"\\u309f\";\n};\n\n/**\n * Check if given char is a katakana\n *\n * @param {string} ch Given char\n * @return {boolean} if given char is a katakana\n */\nconst isKatakana = function (ch) {\n    ch = ch[0];\n    return ch >= \"\\u30a0\" && ch <= \"\\u30ff\";\n};\n\n/**\n * Check if given char is a kana\n *\n * @param {string} ch Given char\n * @return {boolean} if given char is a kana\n */\nconst isKana = function (ch) {\n    return isHiragana(ch) || isKatakana(ch);\n};\n\n/**\n * Check if given char is a kanji\n *\n * @param {string} ch Given char\n * @return {boolean} if given char is a kanji\n */\nconst isKanji = function (ch) {\n    ch = ch[0];\n    return (ch >= \"\\u4e00\" && ch <= \"\\u9fcf\") ||\n        (ch >= \"\\uf900\" && ch <= \"\\ufaff\") ||\n        (ch >= \"\\u3400\" && ch <= \"\\u4dbf\");\n};\n\n/**\n * Check if given char is a Japanese\n *\n * @param {string} ch Given char\n * @return {boolean} if given char is a Japanese\n */\nconst isJapanese = function (ch) {\n    return isKana(ch) || isKanji(ch);\n};\n\n/**\n * Check if given string has hiragana\n *\n * @param {string} str Given string\n * @return {boolean} if given string has hiragana\n */\nconst hasHiragana = function (str) {\n    for (let i = 0; i < str.length; i++) {\n        if (isHiragana(str[i])) return true;\n    }\n    return false;\n};\n\n/**\n * Check if given string has katakana\n *\n * @param {string} str Given string\n * @return {boolean} if given string has katakana\n */\nconst hasKatakana = function (str) {\n    for (let i = 0; i < str.length; i++) {\n        if (isKatakana(str[i])) return true;\n    }\n    return false;\n};\n\n/**\n * Check if given string has kana\n *\n * @param {string} str Given string\n * @return {boolean} if given string has kana\n */\nconst hasKana = function (str) {\n    for (let i = 0; i < str.length; i++) {\n        if (isKana(str[i])) return true;\n    }\n    return false;\n};\n\n/**\n * Check if given string has kanji\n *\n * @param {string} str Given string\n * @return {boolean} if given string has kanji\n */\nconst hasKanji = function (str) {\n    for (let i = 0; i < str.length; i++) {\n        if (isKanji(str[i])) return true;\n    }\n    return false;\n};\n\n/**\n * Check if given string has Japanese\n *\n * @param {string} str Given string\n * @return {boolean} if given string has Japanese\n */\nconst hasJapanese = function (str) {\n    for (let i = 0; i < str.length; i++) {\n        if (isJapanese(str[i])) return true;\n    }\n    return false;\n};\n\n/**\n * Convert kana to hiragana\n *\n * @param {string} str Given string\n * @return {string} Hiragana string\n */\nconst toRawHiragana = function (str) {\n    return [...str].map((ch) => {\n        if (ch > \"\\u30a0\" && ch < \"\\u30f7\") {\n            return String.fromCharCode(ch.charCodeAt(0) + KATAKANA_HIRAGANA_SHIFT);\n        }\n        return ch;\n    }).join(\"\");\n};\n\n/**\n * Convert kana to katakana\n *\n * @param {string} str Given string\n * @return {string} Katakana string\n */\nconst toRawKatakana = function (str) {\n    return [...str].map((ch) => {\n        if (ch > \"\\u3040\" && ch < \"\\u3097\") {\n            return String.fromCharCode(ch.charCodeAt(0) + HIRAGANA_KATAKANA_SHIFT);\n        }\n        return ch;\n    }).join(\"\");\n};\n\n/**\n * Convert kana to romaji\n *\n * @param {string} str Given string\n * @param {string} system To which romanization system the given string is converted\n * @return {string} Romaji string\n */\nconst toRawRomaji = function (str, system) {\n    system = system || ROMANIZATION_SYSTEM.HEPBURN;\n\n    const romajiSystem = {\n        nippon: {\n            // 数字と記号\n            \"１\": \"1\",\n            \"２\": \"2\",\n            \"３\": \"3\",\n            \"４\": \"4\",\n            \"５\": \"5\",\n            \"６\": \"6\",\n            \"７\": \"7\",\n            \"８\": \"8\",\n            \"９\": \"9\",\n            \"０\": \"0\",\n            \"！\": \"!\",\n            \"“\": \"\\\"\",\n            \"”\": \"\\\"\",\n            \"＃\": \"#\",\n            \"＄\": \"$\",\n            \"％\": \"%\",\n            \"＆\": \"&\",\n            \"’\": \"'\",\n            \"（\": \"(\",\n            \"）\": \")\",\n            \"＝\": \"=\",\n            \"～\": \"~\",\n            \"｜\": \"|\",\n            \"＠\": \"@\",\n            \"‘\": \"`\",\n            \"＋\": \"+\",\n            \"＊\": \"*\",\n            \"；\": \";\",\n            \"：\": \":\",\n            \"＜\": \"<\",\n            \"＞\": \">\",\n            \"、\": \",\",\n            \"。\": \".\",\n            \"／\": \"/\",\n            \"？\": \"?\",\n            \"＿\": \"_\",\n            \"・\": \"･\",\n            \"「\": \"\\\"\",\n            \"」\": \"\\\"\",\n            \"｛\": \"{\",\n            \"｝\": \"}\",\n            \"￥\": \"\\\\\",\n            \"＾\": \"^\",\n\n            // 直音-清音(ア～ノ)\n            あ: \"a\",\n            い: \"i\",\n            う: \"u\",\n            え: \"e\",\n            お: \"o\",\n            ア: \"a\",\n            イ: \"i\",\n            ウ: \"u\",\n            エ: \"e\",\n            オ: \"o\",\n\n            か: \"ka\",\n            き: \"ki\",\n            く: \"ku\",\n            け: \"ke\",\n            こ: \"ko\",\n            カ: \"ka\",\n            キ: \"ki\",\n            ク: \"ku\",\n            ケ: \"ke\",\n            コ: \"ko\",\n\n            さ: \"sa\",\n            し: \"si\",\n            す: \"su\",\n            せ: \"se\",\n            そ: \"so\",\n            サ: \"sa\",\n            シ: \"si\",\n            ス: \"su\",\n            セ: \"se\",\n            ソ: \"so\",\n\n            た: \"ta\",\n            ち: \"ti\",\n            つ: \"tu\",\n            て: \"te\",\n            と: \"to\",\n            タ: \"ta\",\n            チ: \"ti\",\n            ツ: \"tu\",\n            テ: \"te\",\n            ト: \"to\",\n\n            な: \"na\",\n            に: \"ni\",\n            ぬ: \"nu\",\n            ね: \"ne\",\n            の: \"no\",\n            ナ: \"na\",\n            ニ: \"ni\",\n            ヌ: \"nu\",\n            ネ: \"ne\",\n            ノ: \"no\",\n\n            // 直音-清音(ハ～ヲ)\n            は: \"ha\",\n            ひ: \"hi\",\n            ふ: \"hu\",\n            へ: \"he\",\n            ほ: \"ho\",\n            ハ: \"ha\",\n            ヒ: \"hi\",\n            フ: \"hu\",\n            ヘ: \"he\",\n            ホ: \"ho\",\n\n            ま: \"ma\",\n            み: \"mi\",\n            む: \"mu\",\n            め: \"me\",\n            も: \"mo\",\n            マ: \"ma\",\n            ミ: \"mi\",\n            ム: \"mu\",\n            メ: \"me\",\n            モ: \"mo\",\n\n            や: \"ya\",\n            ゆ: \"yu\",\n            よ: \"yo\",\n            ヤ: \"ya\",\n            ユ: \"yu\",\n            ヨ: \"yo\",\n\n            ら: \"ra\",\n            り: \"ri\",\n            る: \"ru\",\n            れ: \"re\",\n            ろ: \"ro\",\n            ラ: \"ra\",\n            リ: \"ri\",\n            ル: \"ru\",\n            レ: \"re\",\n            ロ: \"ro\",\n\n            わ: \"wa\",\n            ゐ: \"wi\",\n            ゑ: \"we\",\n            を: \"wo\",\n            ワ: \"wa\",\n            ヰ: \"wi\",\n            ヱ: \"we\",\n            ヲ: \"wo\",\n\n            // 直音-濁音(ガ～ボ)、半濁音(パ～ポ)\n            が: \"ga\",\n            ぎ: \"gi\",\n            ぐ: \"gu\",\n            げ: \"ge\",\n            ご: \"go\",\n            ガ: \"ga\",\n            ギ: \"gi\",\n            グ: \"gu\",\n            ゲ: \"ge\",\n            ゴ: \"go\",\n\n            ざ: \"za\",\n            じ: \"zi\",\n            ず: \"zu\",\n            ぜ: \"ze\",\n            ぞ: \"zo\",\n            ザ: \"za\",\n            ジ: \"zi\",\n            ズ: \"zu\",\n            ゼ: \"ze\",\n            ゾ: \"zo\",\n\n            だ: \"da\",\n            ぢ: \"di\",\n            づ: \"du\",\n            で: \"de\",\n            ど: \"do\",\n            ダ: \"da\",\n            ヂ: \"di\",\n            ヅ: \"du\",\n            デ: \"de\",\n            ド: \"do\",\n\n            ば: \"ba\",\n            び: \"bi\",\n            ぶ: \"bu\",\n            べ: \"be\",\n            ぼ: \"bo\",\n            バ: \"ba\",\n            ビ: \"bi\",\n            ブ: \"bu\",\n            ベ: \"be\",\n            ボ: \"bo\",\n\n            ぱ: \"pa\",\n            ぴ: \"pi\",\n            ぷ: \"pu\",\n            ぺ: \"pe\",\n            ぽ: \"po\",\n            パ: \"pa\",\n            ピ: \"pi\",\n            プ: \"pu\",\n            ペ: \"pe\",\n            ポ: \"po\",\n\n            // 拗音-清音(キャ～リョ)\n            きゃ: \"kya\",\n            きゅ: \"kyu\",\n            きょ: \"kyo\",\n            しゃ: \"sya\",\n            しゅ: \"syu\",\n            しょ: \"syo\",\n            ちゃ: \"tya\",\n            ちゅ: \"tyu\",\n            ちょ: \"tyo\",\n            にゃ: \"nya\",\n            にゅ: \"nyu\",\n            にょ: \"nyo\",\n            ひゃ: \"hya\",\n            ひゅ: \"hyu\",\n            ひょ: \"hyo\",\n            みゃ: \"mya\",\n            みゅ: \"myu\",\n            みょ: \"myo\",\n            りゃ: \"rya\",\n            りゅ: \"ryu\",\n            りょ: \"ryo\",\n            キャ: \"kya\",\n            キュ: \"kyu\",\n            キョ: \"kyo\",\n            シャ: \"sya\",\n            シュ: \"syu\",\n            ショ: \"syo\",\n            チャ: \"tya\",\n            チュ: \"tyu\",\n            チョ: \"tyo\",\n            ニャ: \"nya\",\n            ニュ: \"nyu\",\n            ニョ: \"nyo\",\n            ヒャ: \"hya\",\n            ヒュ: \"hyu\",\n            ヒョ: \"hyo\",\n            ミャ: \"mya\",\n            ミュ: \"myu\",\n            ミョ: \"myo\",\n            リャ: \"rya\",\n            リュ: \"ryu\",\n            リョ: \"ryo\",\n\n            // 拗音-濁音(ギャ～ビョ)、半濁音(ピャ～ピョ)、合拗音(クヮ、グヮ)\n            ぎゃ: \"gya\",\n            ぎゅ: \"gyu\",\n            ぎょ: \"gyo\",\n            じゃ: \"zya\",\n            じゅ: \"zyu\",\n            じょ: \"zyo\",\n            ぢゃ: \"dya\",\n            ぢゅ: \"dyu\",\n            ぢょ: \"dyo\",\n            びゃ: \"bya\",\n            びゅ: \"byu\",\n            びょ: \"byo\",\n            ぴゃ: \"pya\",\n            ぴゅ: \"pyu\",\n            ぴょ: \"pyo\",\n            くゎ: \"kwa\",\n            ぐゎ: \"gwa\",\n            ギャ: \"gya\",\n            ギュ: \"gyu\",\n            ギョ: \"gyo\",\n            ジャ: \"zya\",\n            ジュ: \"zyu\",\n            ジョ: \"zyo\",\n            ヂャ: \"dya\",\n            ヂュ: \"dyu\",\n            ヂョ: \"dyo\",\n            ビャ: \"bya\",\n            ビュ: \"byu\",\n            ビョ: \"byo\",\n            ピャ: \"pya\",\n            ピュ: \"pyu\",\n            ピョ: \"pyo\",\n            クヮ: \"kwa\",\n            グヮ: \"gwa\",\n\n            // 小書きの仮名、符号\n            ぁ: \"a\",\n            ぃ: \"i\",\n            ぅ: \"u\",\n            ぇ: \"e\",\n            ぉ: \"o\",\n            ゃ: \"ya\",\n            ゅ: \"yu\",\n            ょ: \"yo\",\n            ゎ: \"wa\",\n            ァ: \"a\",\n            ィ: \"i\",\n            ゥ: \"u\",\n            ェ: \"e\",\n            ォ: \"o\",\n            ャ: \"ya\",\n            ュ: \"yu\",\n            ョ: \"yo\",\n            ヮ: \"wa\",\n            ヵ: \"ka\",\n            ヶ: \"ke\",\n            ん: \"n\",\n            ン: \"n\",\n            // ー: \"\",\n            \"　\": \" \",\n\n            // 外来音(イェ～グォ)\n            いぇ: \"ye\",\n            // うぃ: \"\",\n            // うぇ: \"\",\n            // うぉ: \"\",\n            きぇ: \"kye\",\n            // くぁ: \"\",\n            くぃ: \"kwi\",\n            くぇ: \"kwe\",\n            くぉ: \"kwo\",\n            // ぐぁ: \"\",\n            ぐぃ: \"gwi\",\n            ぐぇ: \"gwe\",\n            ぐぉ: \"gwo\",\n            イェ: \"ye\",\n            // ウィ: \"\",\n            // ウェ: \"\",\n            // ウォ: \"\",\n            // ヴ: \"\",\n            // ヴァ: \"\",\n            // ヴィ: \"\",\n            // ヴェ: \"\",\n            // ヴォ: \"\",\n            // ヴュ: \"\",\n            // ヴョ: \"\",\n            キェ: \"kya\",\n            // クァ: \"\",\n            クィ: \"kwi\",\n            クェ: \"kwe\",\n            クォ: \"kwo\",\n            // グァ: \"\",\n            グィ: \"gwi\",\n            グェ: \"gwe\",\n            グォ: \"gwo\",\n\n            // 外来音(シェ～フョ)\n            しぇ: \"sye\",\n            じぇ: \"zye\",\n            すぃ: \"swi\",\n            ずぃ: \"zwi\",\n            ちぇ: \"tye\",\n            つぁ: \"twa\",\n            つぃ: \"twi\",\n            つぇ: \"twe\",\n            つぉ: \"two\",\n            // てぃ: \"ti\",\n            // てゅ: \"tyu\",\n            // でぃ: \"di\",\n            // でゅ: \"dyu\",\n            // とぅ: \"tu\",\n            // どぅ: \"du\",\n            にぇ: \"nye\",\n            ひぇ: \"hye\",\n            ふぁ: \"hwa\",\n            ふぃ: \"hwi\",\n            ふぇ: \"hwe\",\n            ふぉ: \"hwo\",\n            ふゅ: \"hwyu\",\n            ふょ: \"hwyo\",\n            シェ: \"sye\",\n            ジェ: \"zye\",\n            スィ: \"swi\",\n            ズィ: \"zwi\",\n            チェ: \"tye\",\n            ツァ: \"twa\",\n            ツィ: \"twi\",\n            ツェ: \"twe\",\n            ツォ: \"two\",\n            // ティ: \"ti\",\n            // テュ: \"tyu\",\n            // ディ: \"di\",\n            // デュ: \"dyu\",\n            // トゥ: \"tu\",\n            // ドゥ: \"du\",\n            ニェ: \"nye\",\n            ヒェ: \"hye\",\n            ファ: \"hwa\",\n            フィ: \"hwi\",\n            フェ: \"hwe\",\n            フォ: \"hwo\",\n            フュ: \"hwyu\",\n            フョ: \"hwyo\"\n        },\n        passport: {\n            // 数字と記号\n            \"１\": \"1\",\n            \"２\": \"2\",\n            \"３\": \"3\",\n            \"４\": \"4\",\n            \"５\": \"5\",\n            \"６\": \"6\",\n            \"７\": \"7\",\n            \"８\": \"8\",\n            \"９\": \"9\",\n            \"０\": \"0\",\n            \"！\": \"!\",\n            \"“\": \"\\\"\",\n            \"”\": \"\\\"\",\n            \"＃\": \"#\",\n            \"＄\": \"$\",\n            \"％\": \"%\",\n            \"＆\": \"&\",\n            \"’\": \"'\",\n            \"（\": \"(\",\n            \"）\": \")\",\n            \"＝\": \"=\",\n            \"～\": \"~\",\n            \"｜\": \"|\",\n            \"＠\": \"@\",\n            \"‘\": \"`\",\n            \"＋\": \"+\",\n            \"＊\": \"*\",\n            \"；\": \";\",\n            \"：\": \":\",\n            \"＜\": \"<\",\n            \"＞\": \">\",\n            \"、\": \",\",\n            \"。\": \".\",\n            \"／\": \"/\",\n            \"？\": \"?\",\n            \"＿\": \"_\",\n            \"・\": \"･\",\n            \"「\": \"\\\"\",\n            \"」\": \"\\\"\",\n            \"｛\": \"{\",\n            \"｝\": \"}\",\n            \"￥\": \"\\\\\",\n            \"＾\": \"^\",\n\n            // 直音-清音(ア～ノ)\n            あ: \"a\",\n            い: \"i\",\n            う: \"u\",\n            え: \"e\",\n            お: \"o\",\n            ア: \"a\",\n            イ: \"i\",\n            ウ: \"u\",\n            エ: \"e\",\n            オ: \"o\",\n\n            か: \"ka\",\n            き: \"ki\",\n            く: \"ku\",\n            け: \"ke\",\n            こ: \"ko\",\n            カ: \"ka\",\n            キ: \"ki\",\n            ク: \"ku\",\n            ケ: \"ke\",\n            コ: \"ko\",\n\n            さ: \"sa\",\n            し: \"shi\",\n            す: \"su\",\n            せ: \"se\",\n            そ: \"so\",\n            サ: \"sa\",\n            シ: \"shi\",\n            ス: \"su\",\n            セ: \"se\",\n            ソ: \"so\",\n\n            た: \"ta\",\n            ち: \"chi\",\n            つ: \"tsu\",\n            て: \"te\",\n            と: \"to\",\n            タ: \"ta\",\n            チ: \"chi\",\n            ツ: \"tsu\",\n            テ: \"te\",\n            ト: \"to\",\n\n            な: \"na\",\n            に: \"ni\",\n            ぬ: \"nu\",\n            ね: \"ne\",\n            の: \"no\",\n            ナ: \"na\",\n            ニ: \"ni\",\n            ヌ: \"nu\",\n            ネ: \"ne\",\n            ノ: \"no\",\n\n            // 直音-清音(ハ～ヲ)\n            は: \"ha\",\n            ひ: \"hi\",\n            ふ: \"fu\",\n            へ: \"he\",\n            ほ: \"ho\",\n            ハ: \"ha\",\n            ヒ: \"hi\",\n            フ: \"fu\",\n            ヘ: \"he\",\n            ホ: \"ho\",\n\n            ま: \"ma\",\n            み: \"mi\",\n            む: \"mu\",\n            め: \"me\",\n            も: \"mo\",\n            マ: \"ma\",\n            ミ: \"mi\",\n            ム: \"mu\",\n            メ: \"me\",\n            モ: \"mo\",\n\n            や: \"ya\",\n            ゆ: \"yu\",\n            よ: \"yo\",\n            ヤ: \"ya\",\n            ユ: \"yu\",\n            ヨ: \"yo\",\n\n            ら: \"ra\",\n            り: \"ri\",\n            る: \"ru\",\n            れ: \"re\",\n            ろ: \"ro\",\n            ラ: \"ra\",\n            リ: \"ri\",\n            ル: \"ru\",\n            レ: \"re\",\n            ロ: \"ro\",\n\n            わ: \"wa\",\n            ゐ: \"i\",\n            ゑ: \"e\",\n            を: \"o\",\n            ワ: \"wa\",\n            ヰ: \"i\",\n            ヱ: \"e\",\n            ヲ: \"o\",\n\n            // 直音-濁音(ガ～ボ)、半濁音(パ～ポ)\n            が: \"ga\",\n            ぎ: \"gi\",\n            ぐ: \"gu\",\n            げ: \"ge\",\n            ご: \"go\",\n            ガ: \"ga\",\n            ギ: \"gi\",\n            グ: \"gu\",\n            ゲ: \"ge\",\n            ゴ: \"go\",\n\n            ざ: \"za\",\n            じ: \"ji\",\n            ず: \"zu\",\n            ぜ: \"ze\",\n            ぞ: \"zo\",\n            ザ: \"za\",\n            ジ: \"ji\",\n            ズ: \"zu\",\n            ゼ: \"ze\",\n            ゾ: \"zo\",\n\n            だ: \"da\",\n            ぢ: \"ji\",\n            づ: \"zu\",\n            で: \"de\",\n            ど: \"do\",\n            ダ: \"da\",\n            ヂ: \"ji\",\n            ヅ: \"zu\",\n            デ: \"de\",\n            ド: \"do\",\n\n            ば: \"ba\",\n            び: \"bi\",\n            ぶ: \"bu\",\n            べ: \"be\",\n            ぼ: \"bo\",\n            バ: \"ba\",\n            ビ: \"bi\",\n            ブ: \"bu\",\n            ベ: \"be\",\n            ボ: \"bo\",\n\n            ぱ: \"pa\",\n            ぴ: \"pi\",\n            ぷ: \"pu\",\n            ぺ: \"pe\",\n            ぽ: \"po\",\n            パ: \"pa\",\n            ピ: \"pi\",\n            プ: \"pu\",\n            ペ: \"pe\",\n            ポ: \"po\",\n\n            // 拗音-清音(キャ～リョ)\n            きゃ: \"kya\",\n            きゅ: \"kyu\",\n            きょ: \"kyo\",\n            しゃ: \"sha\",\n            しゅ: \"shu\",\n            しょ: \"sho\",\n            ちゃ: \"cha\",\n            ちゅ: \"chu\",\n            ちょ: \"cho\",\n            にゃ: \"nya\",\n            にゅ: \"nyu\",\n            にょ: \"nyo\",\n            ひゃ: \"hya\",\n            ひゅ: \"hyu\",\n            ひょ: \"hyo\",\n            みゃ: \"mya\",\n            みゅ: \"myu\",\n            みょ: \"myo\",\n            りゃ: \"rya\",\n            りゅ: \"ryu\",\n            りょ: \"ryo\",\n            キャ: \"kya\",\n            キュ: \"kyu\",\n            キョ: \"kyo\",\n            シャ: \"sha\",\n            シュ: \"shu\",\n            ショ: \"sho\",\n            チャ: \"cha\",\n            チュ: \"chu\",\n            チョ: \"cho\",\n            ニャ: \"nya\",\n            ニュ: \"nyu\",\n            ニョ: \"nyo\",\n            ヒャ: \"hya\",\n            ヒュ: \"hyu\",\n            ヒョ: \"hyo\",\n            ミャ: \"mya\",\n            ミュ: \"myu\",\n            ミョ: \"myo\",\n            リャ: \"rya\",\n            リュ: \"ryu\",\n            リョ: \"ryo\",\n\n            // 拗音-濁音(ギャ～ビョ)、半濁音(ピャ～ピョ)、合拗音(クヮ、グヮ)\n            ぎゃ: \"gya\",\n            ぎゅ: \"gyu\",\n            ぎょ: \"gyo\",\n            じゃ: \"ja\",\n            じゅ: \"ju\",\n            じょ: \"jo\",\n            ぢゃ: \"ja\",\n            ぢゅ: \"ju\",\n            ぢょ: \"jo\",\n            びゃ: \"bya\",\n            びゅ: \"byu\",\n            びょ: \"byo\",\n            ぴゃ: \"pya\",\n            ぴゅ: \"pyu\",\n            ぴょ: \"pyo\",\n            // くゎ: \"\",\n            // ぐゎ: \"\",\n            ギャ: \"gya\",\n            ギュ: \"gyu\",\n            ギョ: \"gyo\",\n            ジャ: \"ja\",\n            ジュ: \"ju\",\n            ジョ: \"jo\",\n            ヂャ: \"ja\",\n            ヂュ: \"ju\",\n            ヂョ: \"jo\",\n            ビャ: \"bya\",\n            ビュ: \"byu\",\n            ビョ: \"byo\",\n            ピャ: \"pya\",\n            ピュ: \"pyu\",\n            ピョ: \"pyo\",\n            // クヮ: \"\",\n            // グヮ: \"\",\n\n            // 小書きの仮名、符号\n            ぁ: \"a\",\n            ぃ: \"i\",\n            ぅ: \"u\",\n            ぇ: \"e\",\n            ぉ: \"o\",\n            ゃ: \"ya\",\n            ゅ: \"yu\",\n            ょ: \"yo\",\n            ゎ: \"wa\",\n            ァ: \"a\",\n            ィ: \"i\",\n            ゥ: \"u\",\n            ェ: \"e\",\n            ォ: \"o\",\n            ャ: \"ya\",\n            ュ: \"yu\",\n            ョ: \"yo\",\n            ヮ: \"wa\",\n            ヵ: \"ka\",\n            ヶ: \"ke\",\n            ん: \"n\",\n            ン: \"n\",\n            // ー: \"\",\n            \"　\": \" \",\n\n            // 外来音(イェ～グォ)\n            // いぇ: \"\",\n            // うぃ: \"\",\n            // うぇ: \"\",\n            // うぉ: \"\",\n            // きぇ: \"\",\n            // くぁ: \"\",\n            // くぃ: \"\",\n            // くぇ: \"\",\n            // くぉ: \"\",\n            // ぐぁ: \"\",\n            // ぐぃ: \"\",\n            // ぐぇ: \"\",\n            // ぐぉ: \"\",\n            // イェ: \"\",\n            // ウィ: \"\",\n            // ウェ: \"\",\n            // ウォ: \"\",\n            ヴ: \"b\"\n            // ヴァ: \"\",\n            // ヴィ: \"\",\n            // ヴェ: \"\",\n            // ヴォ: \"\",\n            // ヴュ: \"\",\n            // ヴョ: \"\",\n            // キェ: \"\",\n            // クァ: \"\",\n            // クィ: \"\",\n            // クェ: \"\",\n            // クォ: \"\",\n            // グァ: \"\",\n            // グィ: \"\",\n            // グェ: \"\",\n            // グォ: \"\",\n\n            // 外来音(シェ～フョ)\n            // しぇ: \"\",\n            // じぇ: \"\",\n            // すぃ: \"\",\n            // ずぃ: \"\",\n            // ちぇ: \"\",\n            // つぁ: \"\",\n            // つぃ: \"\",\n            // つぇ: \"\",\n            // つぉ: \"\",\n            // てぃ: \"\",\n            // てゅ: \"\",\n            // でぃ: \"\",\n            // でゅ: \"\",\n            // とぅ: \"\",\n            // どぅ: \"\",\n            // にぇ: \"\",\n            // ひぇ: \"\",\n            // ふぁ: \"\",\n            // ふぃ: \"\",\n            // ふぇ: \"\",\n            // ふぉ: \"\",\n            // ふゅ: \"\",\n            // ふょ: \"\",\n            // シェ: \"\",\n            // ジェ: \"\",\n            // スィ: \"\",\n            // ズィ: \"\",\n            // チェ: \"\",\n            // ツァ: \"\",\n            // ツィ: \"\",\n            // ツェ: \"\",\n            // ツォ: \"\",\n            // ティ: \"\",\n            // テュ: \"\",\n            // ディ: \"\",\n            // デュ: \"\",\n            // トゥ: \"\",\n            // ドゥ: \"\",\n            // ニェ: \"\",\n            // ヒェ: \"\",\n            // ファ: \"\",\n            // フィ: \"\",\n            // フェ: \"\",\n            // フォ: \"\",\n            // フュ: \"\",\n            // フョ: \"\"\n        },\n        hepburn: {\n            // 数字と記号\n            \"１\": \"1\",\n            \"２\": \"2\",\n            \"３\": \"3\",\n            \"４\": \"4\",\n            \"５\": \"5\",\n            \"６\": \"6\",\n            \"７\": \"7\",\n            \"８\": \"8\",\n            \"９\": \"9\",\n            \"０\": \"0\",\n            \"！\": \"!\",\n            \"“\": \"\\\"\",\n            \"”\": \"\\\"\",\n            \"＃\": \"#\",\n            \"＄\": \"$\",\n            \"％\": \"%\",\n            \"＆\": \"&\",\n            \"’\": \"'\",\n            \"（\": \"(\",\n            \"）\": \")\",\n            \"＝\": \"=\",\n            \"～\": \"~\",\n            \"｜\": \"|\",\n            \"＠\": \"@\",\n            \"‘\": \"`\",\n            \"＋\": \"+\",\n            \"＊\": \"*\",\n            \"；\": \";\",\n            \"：\": \":\",\n            \"＜\": \"<\",\n            \"＞\": \">\",\n            \"、\": \",\",\n            \"。\": \".\",\n            \"／\": \"/\",\n            \"？\": \"?\",\n            \"＿\": \"_\",\n            \"・\": \"･\",\n            \"「\": \"\\\"\",\n            \"」\": \"\\\"\",\n            \"｛\": \"{\",\n            \"｝\": \"}\",\n            \"￥\": \"\\\\\",\n            \"＾\": \"^\",\n\n            // 直音-清音(ア～ノ)\n            あ: \"a\",\n            い: \"i\",\n            う: \"u\",\n            え: \"e\",\n            お: \"o\",\n            ア: \"a\",\n            イ: \"i\",\n            ウ: \"u\",\n            エ: \"e\",\n            オ: \"o\",\n\n            か: \"ka\",\n            き: \"ki\",\n            く: \"ku\",\n            け: \"ke\",\n            こ: \"ko\",\n            カ: \"ka\",\n            キ: \"ki\",\n            ク: \"ku\",\n            ケ: \"ke\",\n            コ: \"ko\",\n\n            さ: \"sa\",\n            し: \"shi\",\n            す: \"su\",\n            せ: \"se\",\n            そ: \"so\",\n            サ: \"sa\",\n            シ: \"shi\",\n            ス: \"su\",\n            セ: \"se\",\n            ソ: \"so\",\n\n            た: \"ta\",\n            ち: \"chi\",\n            つ: \"tsu\",\n            て: \"te\",\n            と: \"to\",\n            タ: \"ta\",\n            チ: \"chi\",\n            ツ: \"tsu\",\n            テ: \"te\",\n            ト: \"to\",\n\n            な: \"na\",\n            に: \"ni\",\n            ぬ: \"nu\",\n            ね: \"ne\",\n            の: \"no\",\n            ナ: \"na\",\n            ニ: \"ni\",\n            ヌ: \"nu\",\n            ネ: \"ne\",\n            ノ: \"no\",\n\n            // 直音-清音(ハ～ヲ)\n            は: \"ha\",\n            ひ: \"hi\",\n            ふ: \"fu\",\n            へ: \"he\",\n            ほ: \"ho\",\n            ハ: \"ha\",\n            ヒ: \"hi\",\n            フ: \"fu\",\n            ヘ: \"he\",\n            ホ: \"ho\",\n\n            ま: \"ma\",\n            み: \"mi\",\n            む: \"mu\",\n            め: \"me\",\n            も: \"mo\",\n            マ: \"ma\",\n            ミ: \"mi\",\n            ム: \"mu\",\n            メ: \"me\",\n            モ: \"mo\",\n\n            や: \"ya\",\n            ゆ: \"yu\",\n            よ: \"yo\",\n            ヤ: \"ya\",\n            ユ: \"yu\",\n            ヨ: \"yo\",\n\n            ら: \"ra\",\n            り: \"ri\",\n            る: \"ru\",\n            れ: \"re\",\n            ろ: \"ro\",\n            ラ: \"ra\",\n            リ: \"ri\",\n            ル: \"ru\",\n            レ: \"re\",\n            ロ: \"ro\",\n\n            わ: \"wa\",\n            ゐ: \"i\",\n            ゑ: \"e\",\n            を: \"o\",\n            ワ: \"wa\",\n            ヰ: \"i\",\n            ヱ: \"e\",\n            ヲ: \"o\",\n\n            // 直音-濁音(ガ～ボ)、半濁音(パ～ポ)\n            が: \"ga\",\n            ぎ: \"gi\",\n            ぐ: \"gu\",\n            げ: \"ge\",\n            ご: \"go\",\n            ガ: \"ga\",\n            ギ: \"gi\",\n            グ: \"gu\",\n            ゲ: \"ge\",\n            ゴ: \"go\",\n\n            ざ: \"za\",\n            じ: \"ji\",\n            ず: \"zu\",\n            ぜ: \"ze\",\n            ぞ: \"zo\",\n            ザ: \"za\",\n            ジ: \"ji\",\n            ズ: \"zu\",\n            ゼ: \"ze\",\n            ゾ: \"zo\",\n\n            だ: \"da\",\n            ぢ: \"ji\",\n            づ: \"zu\",\n            で: \"de\",\n            ど: \"do\",\n            ダ: \"da\",\n            ヂ: \"ji\",\n            ヅ: \"zu\",\n            デ: \"de\",\n            ド: \"do\",\n\n            ば: \"ba\",\n            び: \"bi\",\n            ぶ: \"bu\",\n            べ: \"be\",\n            ぼ: \"bo\",\n            バ: \"ba\",\n            ビ: \"bi\",\n            ブ: \"bu\",\n            ベ: \"be\",\n            ボ: \"bo\",\n\n            ぱ: \"pa\",\n            ぴ: \"pi\",\n            ぷ: \"pu\",\n            ぺ: \"pe\",\n            ぽ: \"po\",\n            パ: \"pa\",\n            ピ: \"pi\",\n            プ: \"pu\",\n            ペ: \"pe\",\n            ポ: \"po\",\n\n            // 拗音-清音(キャ～リョ)\n            きゃ: \"kya\",\n            きゅ: \"kyu\",\n            きょ: \"kyo\",\n            しゃ: \"sha\",\n            しゅ: \"shu\",\n            しょ: \"sho\",\n            ちゃ: \"cha\",\n            ちゅ: \"chu\",\n            ちょ: \"cho\",\n            にゃ: \"nya\",\n            にゅ: \"nyu\",\n            にょ: \"nyo\",\n            ひゃ: \"hya\",\n            ひゅ: \"hyu\",\n            ひょ: \"hyo\",\n            みゃ: \"mya\",\n            みゅ: \"myu\",\n            みょ: \"myo\",\n            りゃ: \"rya\",\n            りゅ: \"ryu\",\n            りょ: \"ryo\",\n            キャ: \"kya\",\n            キュ: \"kyu\",\n            キョ: \"kyo\",\n            シャ: \"sha\",\n            シュ: \"shu\",\n            ショ: \"sho\",\n            チャ: \"cha\",\n            チュ: \"chu\",\n            チョ: \"cho\",\n            ニャ: \"nya\",\n            ニュ: \"nyu\",\n            ニョ: \"nyo\",\n            ヒャ: \"hya\",\n            ヒュ: \"hyu\",\n            ヒョ: \"hyo\",\n            ミャ: \"mya\",\n            ミュ: \"myu\",\n            ミョ: \"myo\",\n            リャ: \"rya\",\n            リュ: \"ryu\",\n            リョ: \"ryo\",\n\n            // 拗音-濁音(ギャ～ビョ)、半濁音(ピャ～ピョ)、合拗音(クヮ、グヮ)\n            ぎゃ: \"gya\",\n            ぎゅ: \"gyu\",\n            ぎょ: \"gyo\",\n            じゃ: \"ja\",\n            じゅ: \"ju\",\n            じょ: \"jo\",\n            ぢゃ: \"ja\",\n            ぢゅ: \"ju\",\n            ぢょ: \"jo\",\n            びゃ: \"bya\",\n            びゅ: \"byu\",\n            びょ: \"byo\",\n            ぴゃ: \"pya\",\n            ぴゅ: \"pyu\",\n            ぴょ: \"pyo\",\n            // くゎ: \"\",\n            // ぐゎ: \"\",\n            ギャ: \"gya\",\n            ギュ: \"gyu\",\n            ギョ: \"gyo\",\n            ジャ: \"ja\",\n            ジュ: \"ju\",\n            ジョ: \"jo\",\n            ヂャ: \"ja\",\n            ヂュ: \"ju\",\n            ヂョ: \"jo\",\n            ビャ: \"bya\",\n            ビュ: \"byu\",\n            ビョ: \"byo\",\n            ピャ: \"pya\",\n            ピュ: \"pyu\",\n            ピョ: \"pyo\",\n            // クヮ: \"\",\n            // グヮ: \"\",\n\n            // 小書きの仮名、符号\n            ぁ: \"a\",\n            ぃ: \"i\",\n            ぅ: \"u\",\n            ぇ: \"e\",\n            ぉ: \"o\",\n            ゃ: \"ya\",\n            ゅ: \"yu\",\n            ょ: \"yo\",\n            ゎ: \"wa\",\n            ァ: \"a\",\n            ィ: \"i\",\n            ゥ: \"u\",\n            ェ: \"e\",\n            ォ: \"o\",\n            ャ: \"ya\",\n            ュ: \"yu\",\n            ョ: \"yo\",\n            ヮ: \"wa\",\n            ヵ: \"ka\",\n            ヶ: \"ke\",\n            ん: \"n\",\n            ン: \"n\",\n            // ー: \"\",\n            \"　\": \" \",\n\n            // 外来音(イェ～グォ)\n            いぇ: \"ye\",\n            うぃ: \"wi\",\n            うぇ: \"we\",\n            うぉ: \"wo\",\n            きぇ: \"kye\",\n            くぁ: \"kwa\",\n            くぃ: \"kwi\",\n            くぇ: \"kwe\",\n            くぉ: \"kwo\",\n            ぐぁ: \"gwa\",\n            ぐぃ: \"gwi\",\n            ぐぇ: \"gwe\",\n            ぐぉ: \"gwo\",\n            イェ: \"ye\",\n            ウィ: \"wi\",\n            ウェ: \"we\",\n            ウォ: \"wo\",\n            ヴ: \"vu\",\n            ヴァ: \"va\",\n            ヴィ: \"vi\",\n            ヴェ: \"ve\",\n            ヴォ: \"vo\",\n            ヴュ: \"vyu\",\n            ヴョ: \"vyo\",\n            キェ: \"kya\",\n            クァ: \"kwa\",\n            クィ: \"kwi\",\n            クェ: \"kwe\",\n            クォ: \"kwo\",\n            グァ: \"gwa\",\n            グィ: \"gwi\",\n            グェ: \"gwe\",\n            グォ: \"gwo\",\n\n            // 外来音(シェ～フョ)\n            しぇ: \"she\",\n            じぇ: \"je\",\n            // すぃ: \"\",\n            // ずぃ: \"\",\n            ちぇ: \"che\",\n            つぁ: \"tsa\",\n            つぃ: \"tsi\",\n            つぇ: \"tse\",\n            つぉ: \"tso\",\n            てぃ: \"ti\",\n            てゅ: \"tyu\",\n            でぃ: \"di\",\n            でゅ: \"dyu\",\n            とぅ: \"tu\",\n            どぅ: \"du\",\n            にぇ: \"nye\",\n            ひぇ: \"hye\",\n            ふぁ: \"fa\",\n            ふぃ: \"fi\",\n            ふぇ: \"fe\",\n            ふぉ: \"fo\",\n            ふゅ: \"fyu\",\n            ふょ: \"fyo\",\n            シェ: \"she\",\n            ジェ: \"je\",\n            // スィ: \"\",\n            // ズィ: \"\",\n            チェ: \"che\",\n            ツァ: \"tsa\",\n            ツィ: \"tsi\",\n            ツェ: \"tse\",\n            ツォ: \"tso\",\n            ティ: \"ti\",\n            テュ: \"tyu\",\n            ディ: \"di\",\n            デュ: \"dyu\",\n            トゥ: \"tu\",\n            ドゥ: \"du\",\n            ニェ: \"nye\",\n            ヒェ: \"hye\",\n            ファ: \"fa\",\n            フィ: \"fi\",\n            フェ: \"fe\",\n            フォ: \"fo\",\n            フュ: \"fyu\",\n            フョ: \"fyo\"\n        }\n    };\n\n    const reg_tsu = /(っ|ッ)([bcdfghijklmnopqrstuvwyz])/gm;\n    const reg_xtsu = /っ|ッ/gm;\n\n    let pnt = 0;\n    let ch;\n    let r;\n    let result = \"\";\n\n    // [PASSPORT] 長音省略 「―」の場合\n    if (system === ROMANIZATION_SYSTEM.PASSPORT) {\n        str = str.replace(/ー/gm, \"\");\n    }\n\n    // [NIPPON|HEPBURN] 撥音の特殊表記 a、i、u、e、o、y\n    if (system === ROMANIZATION_SYSTEM.NIPPON || system === ROMANIZATION_SYSTEM.HEPBURN) {\n        const reg_hatu = new RegExp(/(ん|ン)(?=あ|い|う|え|お|ア|イ|ウ|エ|オ|ぁ|ぃ|ぅ|ぇ|ぉ|ァ|ィ|ゥ|ェ|ォ|や|ゆ|よ|ヤ|ユ|ヨ|ゃ|ゅ|ょ|ャ|ュ|ョ)/g);\n        let match;\n        const indices = [];\n        while ((match = reg_hatu.exec(str)) !== null) {\n            indices.push(match.index + 1);\n        }\n        if (indices.length !== 0) {\n            let mStr = \"\";\n            for (let i = 0; i < indices.length; i++) {\n                if (i === 0) {\n                    mStr += `${str.slice(0, indices[i])}'`;\n                }\n                else {\n                    mStr += `${str.slice(indices[i - 1], indices[i])}'`;\n                }\n            }\n            mStr += str.slice(indices[indices.length - 1]);\n            str = mStr;\n        }\n    }\n\n    // [ALL] kana to roman chars\n    const max = str.length;\n    while (pnt <= max) {\n        if (r = romajiSystem[system][str.substring(pnt, pnt + 2)]) {\n            result += r;\n            pnt += 2;\n        }\n        else {\n            result += (r = romajiSystem[system][ch = str.substring(pnt, pnt + 1)]) ? r : ch;\n            pnt += 1;\n        }\n    }\n    result = result.replace(reg_tsu, \"$2$2\");\n\n    // [PASSPORT|HEPBURN] 子音を重ねて特殊表記\n    if (system === ROMANIZATION_SYSTEM.PASSPORT || system === ROMANIZATION_SYSTEM.HEPBURN) {\n        result = result.replace(/cc/gm, \"tc\");\n    }\n\n    result = result.replace(reg_xtsu, \"tsu\");\n\n    // [PASSPORT|HEPBURN] 撥音の特殊表記 b、m、p\n    if (system === ROMANIZATION_SYSTEM.PASSPORT || system === ROMANIZATION_SYSTEM.HEPBURN) {\n        result = result.replace(/nm/gm, \"mm\");\n        result = result.replace(/nb/gm, \"mb\");\n        result = result.replace(/np/gm, \"mp\");\n    }\n\n    // [NIPPON] 長音変換\n    if (system === ROMANIZATION_SYSTEM.NIPPON) {\n        result = result.replace(/aー/gm, \"â\");\n        result = result.replace(/iー/gm, \"î\");\n        result = result.replace(/uー/gm, \"û\");\n        result = result.replace(/eー/gm, \"ê\");\n        result = result.replace(/oー/gm, \"ô\");\n    }\n\n    // [HEPBURN] 長音変換\n    if (system === ROMANIZATION_SYSTEM.HEPBURN) {\n        result = result.replace(/aー/gm, \"ā\");\n        result = result.replace(/iー/gm, \"ī\");\n        result = result.replace(/uー/gm, \"ū\");\n        result = result.replace(/eー/gm, \"ē\");\n        result = result.replace(/oー/gm, \"ō\");\n    }\n\n    return result;\n};\n\n/**\n * Get the type of given string\n *\n * @param {string} str Given string\n * @return {number} Type number. 0 for pure kanji, 1 for kanji-kana-mixed, 2 for pure kana, 3 for others\n */\nconst getStrType = function (str) {\n    let hasKJ = false;\n    let hasHK = false;\n    for (let i = 0; i < str.length; i++) {\n        if (isKanji(str[i])) {\n            hasKJ = true;\n        }\n        else if (isHiragana(str[i]) || isKatakana(str[i])) {\n            hasHK = true;\n        }\n    }\n    if (hasKJ && hasHK) return 1;\n    else if (hasKJ) return 0;\n    else if (hasHK) return 2;\n    return 3;\n};\n\n/**\n * Patch tokens for conversion\n * @param {Object} tokens Given tokens\n * @return {Object} Patched tokens\n */\nconst patchTokens = function (tokens) {\n    // patch for token structure\n    for (let cr = 0; cr < tokens.length; cr++) {\n        if (hasJapanese(tokens[cr].surface_form)) {\n            if (!tokens[cr].reading) {\n                if (tokens[cr].surface_form.split(\"\").every(isKana)) {\n                    tokens[cr].reading = toRawKatakana(tokens[cr].surface_form);\n                }\n                else {\n                    tokens[cr].reading = tokens[cr].surface_form;\n                }\n            }\n            else if (hasHiragana(tokens[cr].reading)) {\n                tokens[cr].reading = toRawKatakana(tokens[cr].reading);\n            }\n        }\n        else {\n            tokens[cr].reading = tokens[cr].surface_form;\n        }\n    }\n\n    // patch for 助動詞\"う\" after 動詞\n    for (let i = 0; i < tokens.length; i++) {\n        if (tokens[i].pos && tokens[i].pos === \"助動詞\" && (tokens[i].surface_form === \"う\" || tokens[i].surface_form === \"ウ\")) {\n            if (i - 1 >= 0 && tokens[i - 1].pos && tokens[i - 1].pos === \"動詞\") {\n                tokens[i - 1].surface_form += \"う\";\n                if (tokens[i - 1].pronunciation) {\n                    tokens[i - 1].pronunciation += \"ー\";\n                }\n                else {\n                    tokens[i - 1].pronunciation = `${tokens[i - 1].reading}ー`;\n                }\n                tokens[i - 1].reading += \"ウ\";\n                tokens.splice(i, 1);\n                i--;\n            }\n        }\n    }\n\n    // patch for \"っ\" at the tail of 動詞、形容詞\n    for (let j = 0; j < tokens.length; j++) {\n        if (tokens[j].pos && (tokens[j].pos === \"動詞\" || tokens[j].pos === \"形容詞\") && tokens[j].surface_form.length > 1 && (tokens[j].surface_form[tokens[j].surface_form.length - 1] === \"っ\" || tokens[j].surface_form[tokens[j].surface_form.length - 1] === \"ッ\")) {\n            if (j + 1 < tokens.length && tokens[j + 1].pos && (tokens[j + 1].pos === \"動詞\" || tokens[j + 1].pos === \"助動詞\")) {\n                tokens[j].surface_form += tokens[j + 1].surface_form;\n                if (tokens[j].pronunciation) {\n                    tokens[j].pronunciation += tokens[j + 1].pronunciation;\n                }\n                else {\n                    tokens[j].pronunciation = `${tokens[j].reading}${tokens[j + 1].reading}`;\n                }\n                tokens[j].reading += tokens[j + 1].reading;\n                tokens.splice(j + 1, 1);\n                j--;\n            }\n        }\n    }\n\n    return tokens;\n};\n\n/**\n * Convert kana to hiragana\n *\n * @param {string} str Given string\n * @return {string} Hiragana string\n */\nconst kanaToHiragna = function (str) {\n    return toRawHiragana(str);\n};\n\n/**\n * Convert kana to katakana\n *\n * @param {string} str Given string\n * @return {string} Katakana string\n */\nconst kanaToKatakana = function (str) {\n    return toRawKatakana(str);\n};\n\n/**\n * Convert kana to romaji\n *\n * @param {string} str Given string\n * @param {string} system To which romanization system the given string is converted. [\"nippon\"|\"passport\"|\"hepburn\"]\n * @return {string} Romaji string\n */\nconst kanaToRomaji = function (str, system) {\n    return toRawRomaji(str, system);\n};\n\nexport {\n    // language\n    ROMANIZATION_SYSTEM,\n    getStrType,\n    patchTokens,\n    isHiragana,\n    isKatakana,\n    isKana,\n    isKanji,\n    isJapanese,\n    hasHiragana,\n    hasKatakana,\n    hasKana,\n    hasKanji,\n    hasJapanese,\n    toRawHiragana,\n    toRawKatakana,\n    toRawRomaji,\n    kanaToHiragna,\n    kanaToKatakana,\n    kanaToRomaji\n};\n","import {\n    ROMANIZATION_SYSTEM,\n    getStrType,\n    patchTokens,\n    isHiragana,\n    isKatakana,\n    isKana,\n    isKanji,\n    isJapanese,\n    hasHiragana,\n    hasKatakana,\n    hasKana,\n    hasKanji,\n    hasJapanese,\n    toRawHiragana,\n    toRawKatakana,\n    toRawRomaji,\n    kanaToHiragna,\n    kanaToKatakana,\n    kanaToRomaji\n} from \"./util\";\n\n/**\n * Kuroshiro Class\n */\nclass Kuroshiro {\n    /**\n     * Constructor\n     * @constructs Kuroshiro\n     */\n    constructor() {\n        this._analyzer = null;\n    }\n\n    /**\n     * Initialize Kuroshiro\n     * @memberOf Kuroshiro\n     * @instance\n     * @returns {Promise} Promise object represents the result of initialization\n     */\n    async init(analyzer) {\n        if (!analyzer || typeof analyzer !== \"object\" || typeof analyzer.init !== \"function\" || typeof analyzer.parse !== \"function\") {\n            throw new Error(\"Invalid initialization parameter.\");\n        }\n        else if (this._analyzer == null) {\n            try {\n                await analyzer.init();\n                this._analyzer = analyzer;\n            }\n            catch (err) {\n                throw err;\n            }\n        }\n        else {\n            throw new Error(\"Kuroshiro has already been initialized.\");\n        }\n    }\n\n    /**\n     * Convert given string to target syllabary with options available\n     * @memberOf Kuroshiro\n     * @instance\n     * @param {string} str Given String\n     * @param {Object} [options] Settings Object\n     * @param {string} [options.to=\"hiragana\"] Target syllabary [\"hiragana\"|\"katakana\"|\"romaji\"]\n     * @param {string} [options.mode=\"normal\"] Convert mode [\"normal\"|\"spaced\"|\"okurigana\"|\"furigana\"]\n     * @param {string} [options.romajiSystem=\"hepburn\"] Romanization System [\"nippon\"|\"passport\"|\"hepburn\"]\n     * @param {string} [options.delimiter_start=\"(\"] Delimiter(Start)\n     * @param {string} [options.delimiter_end=\")\"] Delimiter(End)\n     * @returns {Promise} Promise object represents the result of conversion\n     */\n    async convert(str, options) {\n        options = options || {};\n        options.to = options.to || \"hiragana\";\n        options.mode = options.mode || \"normal\";\n        options.romajiSystem = options.romajiSystem || ROMANIZATION_SYSTEM.HEPBURN;\n        options.delimiter_start = options.delimiter_start || \"(\";\n        options.delimiter_end = options.delimiter_end || \")\";\n        str = str || \"\";\n\n        if ([\"hiragana\", \"katakana\", \"romaji\"].indexOf(options.to) === -1) {\n            throw new Error(\"Invalid Target Syllabary.\");\n        }\n\n        if ([\"normal\", \"spaced\", \"okurigana\", \"furigana\"].indexOf(options.mode) === -1) {\n            throw new Error(\"Invalid Conversion Mode.\");\n        }\n\n        const ROMAJI_SYSTEMS = Object.keys(ROMANIZATION_SYSTEM).map(e => ROMANIZATION_SYSTEM[e]);\n        if (ROMAJI_SYSTEMS.indexOf(options.romajiSystem) === -1) {\n            throw new Error(\"Invalid Romanization System.\");\n        }\n\n        const rawTokens = await this._analyzer.parse(str);\n        const tokens = patchTokens(rawTokens);\n\n        if (options.mode === \"normal\" || options.mode === \"spaced\") {\n            switch (options.to) {\n                case \"katakana\":\n                    if (options.mode === \"normal\") {\n                        return tokens.map(token => token.reading).join(\"\");\n                    }\n                    return tokens.map(token => token.reading).join(\" \");\n                case \"romaji\":\n                    const romajiConv = (token) => {\n                        let preToken;\n                        if (hasJapanese(token.surface_form)) {\n                            preToken = token.pronunciation || token.reading;\n                        }\n                        else {\n                            preToken = token.surface_form;\n                        }\n                        return toRawRomaji(preToken, options.romajiSystem);\n                    };\n                    if (options.mode === \"normal\") {\n                        return tokens.map(romajiConv).join(\"\");\n                    }\n                    return tokens.map(romajiConv).join(\" \");\n                case \"hiragana\":\n                    for (let hi = 0; hi < tokens.length; hi++) {\n                        if (hasKanji(tokens[hi].surface_form)) {\n                            if (!hasKatakana(tokens[hi].surface_form)) {\n                                tokens[hi].reading = toRawHiragana(tokens[hi].reading);\n                            }\n                            else {\n                                // handle katakana-kanji-mixed tokens\n                                tokens[hi].reading = toRawHiragana(tokens[hi].reading);\n                                let tmp = \"\";\n                                let hpattern = \"\";\n                                for (let hc = 0; hc < tokens[hi].surface_form.length; hc++) {\n                                    if (isKanji(tokens[hi].surface_form[hc])) {\n                                        hpattern += \"(.*)\";\n                                    }\n                                    else {\n                                        hpattern += isKatakana(tokens[hi].surface_form[hc]) ? toRawHiragana(tokens[hi].surface_form[hc]) : tokens[hi].surface_form[hc];\n                                    }\n                                }\n                                const hreg = new RegExp(hpattern);\n                                const hmatches = hreg.exec(tokens[hi].reading);\n                                if (hmatches) {\n                                    let pickKJ = 0;\n                                    for (let hc1 = 0; hc1 < tokens[hi].surface_form.length; hc1++) {\n                                        if (isKanji(tokens[hi].surface_form[hc1])) {\n                                            tmp += hmatches[pickKJ + 1];\n                                            pickKJ++;\n                                        }\n                                        else {\n                                            tmp += tokens[hi].surface_form[hc1];\n                                        }\n                                    }\n                                    tokens[hi].reading = tmp;\n                                }\n                            }\n                        }\n                        else {\n                            tokens[hi].reading = tokens[hi].surface_form;\n                        }\n                    }\n                    if (options.mode === \"normal\") {\n                        return tokens.map(token => token.reading).join(\"\");\n                    }\n                    return tokens.map(token => token.reading).join(\" \");\n                default:\n                    throw new Error(\"Unknown option.to param\");\n            }\n        }\n        else if (options.mode === \"okurigana\" || options.mode === \"furigana\") {\n            const notations = []; // [basic, basic_type[1=kanji,2=kana,3=others], notation, pronunciation]\n            for (let i = 0; i < tokens.length; i++) {\n                const strType = getStrType(tokens[i].surface_form);\n                switch (strType) {\n                    case 0:\n                        notations.push([tokens[i].surface_form, 1, toRawHiragana(tokens[i].reading), tokens[i].pronunciation || tokens[i].reading]);\n                        break;\n                    case 1:\n                        let pattern = \"\";\n                        let isLastTokenKanji = false;\n                        const subs = []; // recognize kanjis and group them\n                        for (let c = 0; c < tokens[i].surface_form.length; c++) {\n                            if (isKanji(tokens[i].surface_form[c])) {\n                                if (!isLastTokenKanji) { // ignore successive kanji tokens (#10)\n                                    isLastTokenKanji = true;\n                                    pattern += \"(.*)\";\n                                    subs.push(tokens[i].surface_form[c]);\n                                }\n                                else {\n                                    subs[subs.length - 1] += tokens[i].surface_form[c];\n                                }\n                            }\n                            else {\n                                isLastTokenKanji = false;\n                                subs.push(tokens[i].surface_form[c]);\n                                pattern += isKatakana(tokens[i].surface_form[c]) ? toRawHiragana(tokens[i].surface_form[c]) : tokens[i].surface_form[c];\n                            }\n                        }\n                        const reg = new RegExp(`^${pattern}$`);\n                        const matches = reg.exec(toRawHiragana(tokens[i].reading));\n                        if (matches) {\n                            let pickKanji = 1;\n                            for (let c1 = 0; c1 < subs.length; c1++) {\n                                if (isKanji(subs[c1][0])) {\n                                    notations.push([subs[c1], 1, matches[pickKanji], toRawKatakana(matches[pickKanji])]);\n                                    pickKanji += 1;\n                                }\n                                else {\n                                    notations.push([subs[c1], 2, toRawHiragana(subs[c1]), toRawKatakana(subs[c1])]);\n                                }\n                            }\n                        }\n                        else {\n                            notations.push([tokens[i].surface_form, 1, toRawHiragana(tokens[i].reading), tokens[i].pronunciation || tokens[i].reading]);\n                        }\n                        break;\n                    case 2:\n                        for (let c2 = 0; c2 < tokens[i].surface_form.length; c2++) {\n                            notations.push([tokens[i].surface_form[c2], 2, toRawHiragana(tokens[i].reading[c2]), (tokens[i].pronunciation && tokens[i].pronunciation[c2]) || tokens[i].reading[c2]]);\n                        }\n                        break;\n                    case 3:\n                        for (let c3 = 0; c3 < tokens[i].surface_form.length; c3++) {\n                            notations.push([tokens[i].surface_form[c3], 3, tokens[i].surface_form[c3], tokens[i].surface_form[c3]]);\n                        }\n                        break;\n                    default:\n                        throw new Error(\"Unknown strType\");\n                }\n            }\n            let result = \"\";\n            switch (options.to) {\n                case \"katakana\":\n                    if (options.mode === \"okurigana\") {\n                        for (let n0 = 0; n0 < notations.length; n0++) {\n                            if (notations[n0][1] !== 1) {\n                                result += notations[n0][0];\n                            }\n                            else {\n                                result += notations[n0][0] + options.delimiter_start + toRawKatakana(notations[n0][2]) + options.delimiter_end;\n                            }\n                        }\n                    }\n                    else { // furigana\n                        for (let n1 = 0; n1 < notations.length; n1++) {\n                            if (notations[n1][1] !== 1) {\n                                result += notations[n1][0];\n                            }\n                            else {\n                                result += `<ruby>${notations[n1][0]}<rp>${options.delimiter_start}</rp><rt>${toRawKatakana(notations[n1][2])}</rt><rp>${options.delimiter_end}</rp></ruby>`;\n                            }\n                        }\n                    }\n                    return result;\n                case \"romaji\":\n                    if (options.mode === \"okurigana\") {\n                        for (let n2 = 0; n2 < notations.length; n2++) {\n                            if (notations[n2][1] !== 1) {\n                                result += notations[n2][0];\n                            }\n                            else {\n                                result += notations[n2][0] + options.delimiter_start + toRawRomaji(notations[n2][3], options.romajiSystem) + options.delimiter_end;\n                            }\n                        }\n                    }\n                    else { // furigana\n                        result += \"<ruby>\";\n                        for (let n3 = 0; n3 < notations.length; n3++) {\n                            result += `${notations[n3][0]}<rp>${options.delimiter_start}</rp><rt>${toRawRomaji(notations[n3][3], options.romajiSystem)}</rt><rp>${options.delimiter_end}</rp>`;\n                        }\n                        result += \"</ruby>\";\n                    }\n                    return result;\n                case \"hiragana\":\n                    if (options.mode === \"okurigana\") {\n                        for (let n4 = 0; n4 < notations.length; n4++) {\n                            if (notations[n4][1] !== 1) {\n                                result += notations[n4][0];\n                            }\n                            else {\n                                result += notations[n4][0] + options.delimiter_start + notations[n4][2] + options.delimiter_end;\n                            }\n                        }\n                    }\n                    else { // furigana\n                        for (let n5 = 0; n5 < notations.length; n5++) {\n                            if (notations[n5][1] !== 1) {\n                                result += notations[n5][0];\n                            }\n                            else {\n                                result += `<ruby>${notations[n5][0]}<rp>${options.delimiter_start}</rp><rt>${notations[n5][2]}</rt><rp>${options.delimiter_end}</rp></ruby>`;\n                            }\n                        }\n                    }\n                    return result;\n                default:\n                    throw new Error(\"Invalid Target Syllabary.\");\n            }\n        }\n    }\n}\n\nconst Util = {\n    isHiragana,\n    isKatakana,\n    isKana,\n    isKanji,\n    isJapanese,\n    hasHiragana,\n    hasKatakana,\n    hasKana,\n    hasKanji,\n    hasJapanese,\n    kanaToHiragna,\n    kanaToKatakana,\n    kanaToRomaji\n};\n\nKuroshiro.Util = Util;\n\nexport default Kuroshiro;\n","import Kuroshiro from \"./core\";\n\nexport default Kuroshiro;\n","import Kuroshiro from \"kuroshiro\";\nimport KuromojiAnalyzer from \"kuroshiro-analyzer-kuromoji\";\n\nconst initListeners = [];\n\nasync function init() {\n  const kuroshiro = new Kuroshiro();\n  await kuroshiro.init(new KuromojiAnalyzer({\n    dictPath: `${browser.extension.getURL(\"/\")}dict/`\n  }));\n\n\n  browser.runtime.onMessage.removeListener(waitInitMessageListener);\n  browser.runtime.onMessage.addListener(async (message) => {\n    if (message.type === 'convert') {\n      return await kuroshiro.convert(message.content, {mode:\"furigana\", to:\"hiragana\"})\n    } else if (message.type === 'ping') {\n      return 'pong';\n    }\n  });\n\n  initListeners.forEach((listener) => listener());\n}\n\nbrowser.contextMenus.create({\n  id: \"do-convert\",\n  title: browser.i18n.getMessage(\"contextMenuItemDoConvert\"),\n  contexts: [\"page\"]\n});\n\nbrowser.contextMenus.onClicked.addListener(function(info, tab) {\n  switch (info.menuItemId) {\n    case \"do-convert\":\n      browser.tabs.sendMessage(tab.id, {type: 'init'})\n      break;\n  }\n})\n\nasync function waitInitMessageListener(message) {\n  if (message.type === 'ping') {\n    return new Promise((resolve) => {\n      initListeners.push(() => {\n        resolve('pong');\n      });\n    });\n  }\n}\n\nbrowser.runtime.onMessage.addListener(waitInitMessageListener);\n\ninit();"],"sourceRoot":""}